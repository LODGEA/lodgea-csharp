/*
 * lodgea-csharp
 *
 * LODGEA SDK for csharp. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@lodgea.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lodgea-csharp.Client.OpenAPIDateConverter;

namespace lodgea-csharp.com.lodgea.model
{
    /// <summary>
    /// PropertiesPropertyIdGet200ResponsePropertyServiceListInnerOperationTimeListInner
    /// </summary>
    [DataContract]
    public partial class PropertiesPropertyIdGet200ResponsePropertyServiceListInnerOperationTimeListInner :  IEquatable<PropertiesPropertyIdGet200ResponsePropertyServiceListInnerOperationTimeListInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertiesPropertyIdGet200ResponsePropertyServiceListInnerOperationTimeListInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PropertiesPropertyIdGet200ResponsePropertyServiceListInnerOperationTimeListInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertiesPropertyIdGet200ResponsePropertyServiceListInnerOperationTimeListInner" /> class.
        /// </summary>
        /// <param name="start">The start time of operation in milliseconds. (required).</param>
        /// <param name="end">The end time of operation in milliseconds. (required).</param>
        /// <param name="monday">Indicates whether the operation is open on Monday. (required).</param>
        /// <param name="tuesday">Indicates whether the operation is open on Tuesday. (required).</param>
        /// <param name="wednesday">Indicates whether the operation is open on Wednesday. (required).</param>
        /// <param name="thursday">Indicates whether the operation is open on Thursday. (required).</param>
        /// <param name="friday">Indicates whether the operation is open on Friday. (required).</param>
        /// <param name="saturday">Indicates whether the operation is open on Saturday. (required).</param>
        /// <param name="sunday">Indicates whether the operation is open on Sunday. (required).</param>
        public PropertiesPropertyIdGet200ResponsePropertyServiceListInnerOperationTimeListInner(decimal start = default(decimal), decimal end = default(decimal), bool monday = default(bool), bool tuesday = default(bool), bool wednesday = default(bool), bool thursday = default(bool), bool friday = default(bool), bool saturday = default(bool), bool sunday = default(bool))
        {
            // to ensure "start" is required (not null)
            if (start == null)
            {
                throw new InvalidDataException("start is a required property for PropertiesPropertyIdGet200ResponsePropertyServiceListInnerOperationTimeListInner and cannot be null");
            }
            else
            {
                this.Start = start;
            }

            // to ensure "end" is required (not null)
            if (end == null)
            {
                throw new InvalidDataException("end is a required property for PropertiesPropertyIdGet200ResponsePropertyServiceListInnerOperationTimeListInner and cannot be null");
            }
            else
            {
                this.End = end;
            }

            // to ensure "monday" is required (not null)
            if (monday == null)
            {
                throw new InvalidDataException("monday is a required property for PropertiesPropertyIdGet200ResponsePropertyServiceListInnerOperationTimeListInner and cannot be null");
            }
            else
            {
                this.Monday = monday;
            }

            // to ensure "tuesday" is required (not null)
            if (tuesday == null)
            {
                throw new InvalidDataException("tuesday is a required property for PropertiesPropertyIdGet200ResponsePropertyServiceListInnerOperationTimeListInner and cannot be null");
            }
            else
            {
                this.Tuesday = tuesday;
            }

            // to ensure "wednesday" is required (not null)
            if (wednesday == null)
            {
                throw new InvalidDataException("wednesday is a required property for PropertiesPropertyIdGet200ResponsePropertyServiceListInnerOperationTimeListInner and cannot be null");
            }
            else
            {
                this.Wednesday = wednesday;
            }

            // to ensure "thursday" is required (not null)
            if (thursday == null)
            {
                throw new InvalidDataException("thursday is a required property for PropertiesPropertyIdGet200ResponsePropertyServiceListInnerOperationTimeListInner and cannot be null");
            }
            else
            {
                this.Thursday = thursday;
            }

            // to ensure "friday" is required (not null)
            if (friday == null)
            {
                throw new InvalidDataException("friday is a required property for PropertiesPropertyIdGet200ResponsePropertyServiceListInnerOperationTimeListInner and cannot be null");
            }
            else
            {
                this.Friday = friday;
            }

            // to ensure "saturday" is required (not null)
            if (saturday == null)
            {
                throw new InvalidDataException("saturday is a required property for PropertiesPropertyIdGet200ResponsePropertyServiceListInnerOperationTimeListInner and cannot be null");
            }
            else
            {
                this.Saturday = saturday;
            }

            // to ensure "sunday" is required (not null)
            if (sunday == null)
            {
                throw new InvalidDataException("sunday is a required property for PropertiesPropertyIdGet200ResponsePropertyServiceListInnerOperationTimeListInner and cannot be null");
            }
            else
            {
                this.Sunday = sunday;
            }

        }

        /// <summary>
        /// The start time of operation in milliseconds.
        /// </summary>
        /// <value>The start time of operation in milliseconds.</value>
        [DataMember(Name="start", EmitDefaultValue=true)]
        public decimal Start { get; set; }

        /// <summary>
        /// The end time of operation in milliseconds.
        /// </summary>
        /// <value>The end time of operation in milliseconds.</value>
        [DataMember(Name="end", EmitDefaultValue=true)]
        public decimal End { get; set; }

        /// <summary>
        /// Indicates whether the operation is open on Monday.
        /// </summary>
        /// <value>Indicates whether the operation is open on Monday.</value>
        [DataMember(Name="monday", EmitDefaultValue=true)]
        public bool Monday { get; set; }

        /// <summary>
        /// Indicates whether the operation is open on Tuesday.
        /// </summary>
        /// <value>Indicates whether the operation is open on Tuesday.</value>
        [DataMember(Name="tuesday", EmitDefaultValue=true)]
        public bool Tuesday { get; set; }

        /// <summary>
        /// Indicates whether the operation is open on Wednesday.
        /// </summary>
        /// <value>Indicates whether the operation is open on Wednesday.</value>
        [DataMember(Name="wednesday", EmitDefaultValue=true)]
        public bool Wednesday { get; set; }

        /// <summary>
        /// Indicates whether the operation is open on Thursday.
        /// </summary>
        /// <value>Indicates whether the operation is open on Thursday.</value>
        [DataMember(Name="thursday", EmitDefaultValue=true)]
        public bool Thursday { get; set; }

        /// <summary>
        /// Indicates whether the operation is open on Friday.
        /// </summary>
        /// <value>Indicates whether the operation is open on Friday.</value>
        [DataMember(Name="friday", EmitDefaultValue=true)]
        public bool Friday { get; set; }

        /// <summary>
        /// Indicates whether the operation is open on Saturday.
        /// </summary>
        /// <value>Indicates whether the operation is open on Saturday.</value>
        [DataMember(Name="saturday", EmitDefaultValue=true)]
        public bool Saturday { get; set; }

        /// <summary>
        /// Indicates whether the operation is open on Sunday.
        /// </summary>
        /// <value>Indicates whether the operation is open on Sunday.</value>
        [DataMember(Name="sunday", EmitDefaultValue=true)]
        public bool Sunday { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PropertiesPropertyIdGet200ResponsePropertyServiceListInnerOperationTimeListInner {\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  Monday: ").Append(Monday).Append("\n");
            sb.Append("  Tuesday: ").Append(Tuesday).Append("\n");
            sb.Append("  Wednesday: ").Append(Wednesday).Append("\n");
            sb.Append("  Thursday: ").Append(Thursday).Append("\n");
            sb.Append("  Friday: ").Append(Friday).Append("\n");
            sb.Append("  Saturday: ").Append(Saturday).Append("\n");
            sb.Append("  Sunday: ").Append(Sunday).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PropertiesPropertyIdGet200ResponsePropertyServiceListInnerOperationTimeListInner);
        }

        /// <summary>
        /// Returns true if PropertiesPropertyIdGet200ResponsePropertyServiceListInnerOperationTimeListInner instances are equal
        /// </summary>
        /// <param name="input">Instance of PropertiesPropertyIdGet200ResponsePropertyServiceListInnerOperationTimeListInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PropertiesPropertyIdGet200ResponsePropertyServiceListInnerOperationTimeListInner input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.End == input.End ||
                    (this.End != null &&
                    this.End.Equals(input.End))
                ) && 
                (
                    this.Monday == input.Monday ||
                    (this.Monday != null &&
                    this.Monday.Equals(input.Monday))
                ) && 
                (
                    this.Tuesday == input.Tuesday ||
                    (this.Tuesday != null &&
                    this.Tuesday.Equals(input.Tuesday))
                ) && 
                (
                    this.Wednesday == input.Wednesday ||
                    (this.Wednesday != null &&
                    this.Wednesday.Equals(input.Wednesday))
                ) && 
                (
                    this.Thursday == input.Thursday ||
                    (this.Thursday != null &&
                    this.Thursday.Equals(input.Thursday))
                ) && 
                (
                    this.Friday == input.Friday ||
                    (this.Friday != null &&
                    this.Friday.Equals(input.Friday))
                ) && 
                (
                    this.Saturday == input.Saturday ||
                    (this.Saturday != null &&
                    this.Saturday.Equals(input.Saturday))
                ) && 
                (
                    this.Sunday == input.Sunday ||
                    (this.Sunday != null &&
                    this.Sunday.Equals(input.Sunday))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Start != null)
                    hashCode = hashCode * 59 + this.Start.GetHashCode();
                if (this.End != null)
                    hashCode = hashCode * 59 + this.End.GetHashCode();
                if (this.Monday != null)
                    hashCode = hashCode * 59 + this.Monday.GetHashCode();
                if (this.Tuesday != null)
                    hashCode = hashCode * 59 + this.Tuesday.GetHashCode();
                if (this.Wednesday != null)
                    hashCode = hashCode * 59 + this.Wednesday.GetHashCode();
                if (this.Thursday != null)
                    hashCode = hashCode * 59 + this.Thursday.GetHashCode();
                if (this.Friday != null)
                    hashCode = hashCode * 59 + this.Friday.GetHashCode();
                if (this.Saturday != null)
                    hashCode = hashCode * 59 + this.Saturday.GetHashCode();
                if (this.Sunday != null)
                    hashCode = hashCode * 59 + this.Sunday.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
