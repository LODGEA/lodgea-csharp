/*
 * lodgea-csharp
 *
 * LODGEA SDK for csharp. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@lodgea.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lodgea-csharp.Client.OpenAPIDateConverter;

namespace lodgea-csharp.com.lodgea.model
{
    /// <summary>
    /// Contains information about the pets policy of the property
    /// </summary>
    [DataContract]
    public partial class PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerPetsPolicy :  IEquatable<PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerPetsPolicy>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerPetsPolicy" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerPetsPolicy() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerPetsPolicy" /> class.
        /// </summary>
        /// <param name="allowed">Indicates if pets are allowed in the property. (required).</param>
        /// <param name="byArrangement">Indicates if pets are allowed by arrangement. (required).</param>
        /// <param name="freeOfCharge">Indicates if pets are allowed without any additional charge. (required).</param>
        public PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerPetsPolicy(bool allowed = default(bool), bool byArrangement = default(bool), bool freeOfCharge = default(bool))
        {
            // to ensure "allowed" is required (not null)
            if (allowed == null)
            {
                throw new InvalidDataException("allowed is a required property for PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerPetsPolicy and cannot be null");
            }
            else
            {
                this.Allowed = allowed;
            }

            // to ensure "byArrangement" is required (not null)
            if (byArrangement == null)
            {
                throw new InvalidDataException("byArrangement is a required property for PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerPetsPolicy and cannot be null");
            }
            else
            {
                this.ByArrangement = byArrangement;
            }

            // to ensure "freeOfCharge" is required (not null)
            if (freeOfCharge == null)
            {
                throw new InvalidDataException("freeOfCharge is a required property for PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerPetsPolicy and cannot be null");
            }
            else
            {
                this.FreeOfCharge = freeOfCharge;
            }

        }

        /// <summary>
        /// Indicates if pets are allowed in the property.
        /// </summary>
        /// <value>Indicates if pets are allowed in the property.</value>
        [DataMember(Name="allowed", EmitDefaultValue=true)]
        public bool Allowed { get; set; }

        /// <summary>
        /// Indicates if pets are allowed by arrangement.
        /// </summary>
        /// <value>Indicates if pets are allowed by arrangement.</value>
        [DataMember(Name="byArrangement", EmitDefaultValue=true)]
        public bool ByArrangement { get; set; }

        /// <summary>
        /// Indicates if pets are allowed without any additional charge.
        /// </summary>
        /// <value>Indicates if pets are allowed without any additional charge.</value>
        [DataMember(Name="freeOfCharge", EmitDefaultValue=true)]
        public bool FreeOfCharge { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerPetsPolicy {\n");
            sb.Append("  Allowed: ").Append(Allowed).Append("\n");
            sb.Append("  ByArrangement: ").Append(ByArrangement).Append("\n");
            sb.Append("  FreeOfCharge: ").Append(FreeOfCharge).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerPetsPolicy);
        }

        /// <summary>
        /// Returns true if PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerPetsPolicy instances are equal
        /// </summary>
        /// <param name="input">Instance of PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerPetsPolicy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerPetsPolicy input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Allowed == input.Allowed ||
                    (this.Allowed != null &&
                    this.Allowed.Equals(input.Allowed))
                ) && 
                (
                    this.ByArrangement == input.ByArrangement ||
                    (this.ByArrangement != null &&
                    this.ByArrangement.Equals(input.ByArrangement))
                ) && 
                (
                    this.FreeOfCharge == input.FreeOfCharge ||
                    (this.FreeOfCharge != null &&
                    this.FreeOfCharge.Equals(input.FreeOfCharge))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Allowed != null)
                    hashCode = hashCode * 59 + this.Allowed.GetHashCode();
                if (this.ByArrangement != null)
                    hashCode = hashCode * 59 + this.ByArrangement.GetHashCode();
                if (this.FreeOfCharge != null)
                    hashCode = hashCode * 59 + this.FreeOfCharge.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
