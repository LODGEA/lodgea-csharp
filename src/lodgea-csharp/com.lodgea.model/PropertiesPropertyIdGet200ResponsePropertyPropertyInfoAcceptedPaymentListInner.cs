/*
 * lodgea-csharp
 *
 * LODGEA SDK for csharp. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@lodgea.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lodgea-csharp.Client.OpenAPIDateConverter;

namespace lodgea-csharp.com.lodgea.model
{
    /// <summary>
    /// PropertiesPropertyIdGet200ResponsePropertyPropertyInfoAcceptedPaymentListInner
    /// </summary>
    [DataContract]
    public partial class PropertiesPropertyIdGet200ResponsePropertyPropertyInfoAcceptedPaymentListInner :  IEquatable<PropertiesPropertyIdGet200ResponsePropertyPropertyInfoAcceptedPaymentListInner>, IValidatableObject
    {
        /// <summary>
        /// The code of the payment option.
        /// </summary>
        /// <value>The code of the payment option.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CodeEnum
        {
            /// <summary>
            /// Enum Amex for value: amex
            /// </summary>
            [EnumMember(Value = "amex")]
            Amex = 1,

            /// <summary>
            /// Enum Visa for value: visa
            /// </summary>
            [EnumMember(Value = "visa")]
            Visa = 2,

            /// <summary>
            /// Enum Mastercard for value: mastercard
            /// </summary>
            [EnumMember(Value = "mastercard")]
            Mastercard = 3,

            /// <summary>
            /// Enum Diners for value: diners
            /// </summary>
            [EnumMember(Value = "diners")]
            Diners = 4,

            /// <summary>
            /// Enum Jcb for value: jcb
            /// </summary>
            [EnumMember(Value = "jcb")]
            Jcb = 5,

            /// <summary>
            /// Enum Maestro for value: maestro
            /// </summary>
            [EnumMember(Value = "maestro")]
            Maestro = 6,

            /// <summary>
            /// Enum Discover for value: discover
            /// </summary>
            [EnumMember(Value = "discover")]
            Discover = 7,

            /// <summary>
            /// Enum Bancontact for value: bancontact
            /// </summary>
            [EnumMember(Value = "bancontact")]
            Bancontact = 8,

            /// <summary>
            /// Enum Cashonly for value: cashonly
            /// </summary>
            [EnumMember(Value = "cashonly")]
            Cashonly = 9,

            /// <summary>
            /// Enum Bankcard for value: bankcard
            /// </summary>
            [EnumMember(Value = "bankcard")]
            Bankcard = 10,

            /// <summary>
            /// Enum Cartasi for value: cartasi
            /// </summary>
            [EnumMember(Value = "cartasi")]
            Cartasi = 11,

            /// <summary>
            /// Enum Argencard for value: argencard
            /// </summary>
            [EnumMember(Value = "argencard")]
            Argencard = 12,

            /// <summary>
            /// Enum Cabal for value: cabal
            /// </summary>
            [EnumMember(Value = "cabal")]
            Cabal = 13,

            /// <summary>
            /// Enum Redcompra for value: redcompra
            /// </summary>
            [EnumMember(Value = "redcompra")]
            Redcompra = 14,

            /// <summary>
            /// Enum Other for value: other
            /// </summary>
            [EnumMember(Value = "other")]
            Other = 15,

            /// <summary>
            /// Enum Greatwall for value: greatwall
            /// </summary>
            [EnumMember(Value = "greatwall")]
            Greatwall = 16,

            /// <summary>
            /// Enum Dragonpay for value: dragonpay
            /// </summary>
            [EnumMember(Value = "dragonpay")]
            Dragonpay = 17,

            /// <summary>
            /// Enum Eftpos for value: eftpos
            /// </summary>
            [EnumMember(Value = "eftpos")]
            Eftpos = 18,

            /// <summary>
            /// Enum Hipercard for value: hipercard
            /// </summary>
            [EnumMember(Value = "hipercard")]
            Hipercard = 19,

            /// <summary>
            /// Enum Unionpaydebit for value: unionpaydebit
            /// </summary>
            [EnumMember(Value = "unionpaydebit")]
            Unionpaydebit = 20,

            /// <summary>
            /// Enum Eccard for value: eccard
            /// </summary>
            [EnumMember(Value = "eccard")]
            Eccard = 21,

            /// <summary>
            /// Enum Bccard for value: bccard
            /// </summary>
            [EnumMember(Value = "bccard")]
            Bccard = 22,

            /// <summary>
            /// Enum Mastercardvirtual for value: mastercardvirtual
            /// </summary>
            [EnumMember(Value = "mastercardvirtual")]
            Mastercardvirtual = 23,

            /// <summary>
            /// Enum Mastercardgoogle for value: mastercardgoogle
            /// </summary>
            [EnumMember(Value = "mastercardgoogle")]
            Mastercardgoogle = 24,

            /// <summary>
            /// Enum Unionpaycredit for value: unionpaycredit
            /// </summary>
            [EnumMember(Value = "unionpaycredit")]
            Unionpaycredit = 25

        }

        /// <summary>
        /// The code of the payment option.
        /// </summary>
        /// <value>The code of the payment option.</value>
        [DataMember(Name="code", EmitDefaultValue=true)]
        public CodeEnum Code { get; set; }
        /// <summary>
        /// The type of the payment option.
        /// </summary>
        /// <value>The type of the payment option.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Creditcard for value: creditcard
            /// </summary>
            [EnumMember(Value = "creditcard")]
            Creditcard = 1,

            /// <summary>
            /// Enum Debitcard for value: debitcard
            /// </summary>
            [EnumMember(Value = "debitcard")]
            Debitcard = 2,

            /// <summary>
            /// Enum Paymentservice for value: paymentservice
            /// </summary>
            [EnumMember(Value = "paymentservice")]
            Paymentservice = 3,

            /// <summary>
            /// Enum Cash for value: cash
            /// </summary>
            [EnumMember(Value = "cash")]
            Cash = 4

        }

        /// <summary>
        /// The type of the payment option.
        /// </summary>
        /// <value>The type of the payment option.</value>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertiesPropertyIdGet200ResponsePropertyPropertyInfoAcceptedPaymentListInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PropertiesPropertyIdGet200ResponsePropertyPropertyInfoAcceptedPaymentListInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertiesPropertyIdGet200ResponsePropertyPropertyInfoAcceptedPaymentListInner" /> class.
        /// </summary>
        /// <param name="code">The code of the payment option. (required).</param>
        /// <param name="type">The type of the payment option. (required).</param>
        public PropertiesPropertyIdGet200ResponsePropertyPropertyInfoAcceptedPaymentListInner(CodeEnum code = default(CodeEnum), TypeEnum type = default(TypeEnum))
        {
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new InvalidDataException("code is a required property for PropertiesPropertyIdGet200ResponsePropertyPropertyInfoAcceptedPaymentListInner and cannot be null");
            }
            else
            {
                this.Code = code;
            }

            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for PropertiesPropertyIdGet200ResponsePropertyPropertyInfoAcceptedPaymentListInner and cannot be null");
            }
            else
            {
                this.Type = type;
            }

        }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PropertiesPropertyIdGet200ResponsePropertyPropertyInfoAcceptedPaymentListInner {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PropertiesPropertyIdGet200ResponsePropertyPropertyInfoAcceptedPaymentListInner);
        }

        /// <summary>
        /// Returns true if PropertiesPropertyIdGet200ResponsePropertyPropertyInfoAcceptedPaymentListInner instances are equal
        /// </summary>
        /// <param name="input">Instance of PropertiesPropertyIdGet200ResponsePropertyPropertyInfoAcceptedPaymentListInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PropertiesPropertyIdGet200ResponsePropertyPropertyInfoAcceptedPaymentListInner input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
