/*
 * lodgea-csharp
 *
 * LODGEA SDK for csharp. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@lodgea.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lodgea-csharp.Client.OpenAPIDateConverter;

namespace lodgea-csharp.com.lodgea.model
{
    /// <summary>
    /// The policy info for this product.
    /// </summary>
    [DataContract]
    public partial class PropertiesPropertyIdGet200ResponseProductListInnerPolicyInfo :  IEquatable<PropertiesPropertyIdGet200ResponseProductListInnerPolicyInfo>, IValidatableObject
    {
        /// <summary>
        /// The type of the prepayment policy.
        /// </summary>
        /// <value>The type of the prepayment policy.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PrepaymentPolicyEnum
        {
            /// <summary>
            /// Enum Cancellationfeebegins for value: after_cancellation_fee_begins
            /// </summary>
            [EnumMember(Value = "after_cancellation_fee_begins")]
            Cancellationfeebegins = 1,

            /// <summary>
            /// Enum Reservationismade for value: after_reservation_is_made
            /// </summary>
            [EnumMember(Value = "after_reservation_is_made")]
            Reservationismade = 2

        }

        /// <summary>
        /// The type of the prepayment policy.
        /// </summary>
        /// <value>The type of the prepayment policy.</value>
        [DataMember(Name="prepaymentPolicy", EmitDefaultValue=false)]
        public PrepaymentPolicyEnum? PrepaymentPolicy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertiesPropertyIdGet200ResponseProductListInnerPolicyInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PropertiesPropertyIdGet200ResponseProductListInnerPolicyInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertiesPropertyIdGet200ResponseProductListInnerPolicyInfo" /> class.
        /// </summary>
        /// <param name="checkInTime">Check-in time (unix timestamp in ms). (required).</param>
        /// <param name="checkOutTime">Check-out time (unix timestamp in ms). (required).</param>
        /// <param name="totalGuestCount">The maximum number of guests allowed..</param>
        /// <param name="cancellationPolicyList">List of cancellation policies. (required).</param>
        /// <param name="advanceBookingMin">The minimum number of days in advance a booking must be made (required).</param>
        /// <param name="advanceBookingMax">The maximum number of days in advance a booking can be made (required).</param>
        /// <param name="petsPolicy">petsPolicy.</param>
        /// <param name="prepaymentPolicy">The type of the prepayment policy..</param>
        /// <param name="guaranteePolicy">guaranteePolicy.</param>
        /// <param name="taxPolicyList">A list of taxes and their policies. (required).</param>
        /// <param name="feePolicyList">A list of fees and their policies. (required).</param>
        /// <param name="name">The name of this policy..</param>
        public PropertiesPropertyIdGet200ResponseProductListInnerPolicyInfo(decimal checkInTime = default(decimal), decimal checkOutTime = default(decimal), decimal totalGuestCount = default(decimal), List<PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerCancellationPolicyListInner> cancellationPolicyList = default(List<PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerCancellationPolicyListInner>), decimal advanceBookingMin = default(decimal), decimal advanceBookingMax = default(decimal), PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerPetsPolicy petsPolicy = default(PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerPetsPolicy), PrepaymentPolicyEnum? prepaymentPolicy = default(PrepaymentPolicyEnum?), PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerGuaranteePolicy guaranteePolicy = default(PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerGuaranteePolicy), List<PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerTaxPolicyListInner> taxPolicyList = default(List<PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerTaxPolicyListInner>), List<PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerFeePolicyListInner> feePolicyList = default(List<PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerFeePolicyListInner>), string name = default(string))
        {
            // to ensure "checkInTime" is required (not null)
            if (checkInTime == null)
            {
                throw new InvalidDataException("checkInTime is a required property for PropertiesPropertyIdGet200ResponseProductListInnerPolicyInfo and cannot be null");
            }
            else
            {
                this.CheckInTime = checkInTime;
            }

            // to ensure "checkOutTime" is required (not null)
            if (checkOutTime == null)
            {
                throw new InvalidDataException("checkOutTime is a required property for PropertiesPropertyIdGet200ResponseProductListInnerPolicyInfo and cannot be null");
            }
            else
            {
                this.CheckOutTime = checkOutTime;
            }

            // to ensure "cancellationPolicyList" is required (not null)
            if (cancellationPolicyList == null)
            {
                throw new InvalidDataException("cancellationPolicyList is a required property for PropertiesPropertyIdGet200ResponseProductListInnerPolicyInfo and cannot be null");
            }
            else
            {
                this.CancellationPolicyList = cancellationPolicyList;
            }

            // to ensure "advanceBookingMin" is required (not null)
            if (advanceBookingMin == null)
            {
                throw new InvalidDataException("advanceBookingMin is a required property for PropertiesPropertyIdGet200ResponseProductListInnerPolicyInfo and cannot be null");
            }
            else
            {
                this.AdvanceBookingMin = advanceBookingMin;
            }

            // to ensure "advanceBookingMax" is required (not null)
            if (advanceBookingMax == null)
            {
                throw new InvalidDataException("advanceBookingMax is a required property for PropertiesPropertyIdGet200ResponseProductListInnerPolicyInfo and cannot be null");
            }
            else
            {
                this.AdvanceBookingMax = advanceBookingMax;
            }

            // to ensure "taxPolicyList" is required (not null)
            if (taxPolicyList == null)
            {
                throw new InvalidDataException("taxPolicyList is a required property for PropertiesPropertyIdGet200ResponseProductListInnerPolicyInfo and cannot be null");
            }
            else
            {
                this.TaxPolicyList = taxPolicyList;
            }

            // to ensure "feePolicyList" is required (not null)
            if (feePolicyList == null)
            {
                throw new InvalidDataException("feePolicyList is a required property for PropertiesPropertyIdGet200ResponseProductListInnerPolicyInfo and cannot be null");
            }
            else
            {
                this.FeePolicyList = feePolicyList;
            }

            this.TotalGuestCount = totalGuestCount;
            this.PetsPolicy = petsPolicy;
            this.PrepaymentPolicy = prepaymentPolicy;
            this.GuaranteePolicy = guaranteePolicy;
            this.Name = name;
        }

        /// <summary>
        /// Check-in time (unix timestamp in ms).
        /// </summary>
        /// <value>Check-in time (unix timestamp in ms).</value>
        [DataMember(Name="checkInTime", EmitDefaultValue=true)]
        public decimal CheckInTime { get; set; }

        /// <summary>
        /// Check-out time (unix timestamp in ms).
        /// </summary>
        /// <value>Check-out time (unix timestamp in ms).</value>
        [DataMember(Name="checkOutTime", EmitDefaultValue=true)]
        public decimal CheckOutTime { get; set; }

        /// <summary>
        /// The maximum number of guests allowed.
        /// </summary>
        /// <value>The maximum number of guests allowed.</value>
        [DataMember(Name="totalGuestCount", EmitDefaultValue=false)]
        public decimal TotalGuestCount { get; set; }

        /// <summary>
        /// List of cancellation policies.
        /// </summary>
        /// <value>List of cancellation policies.</value>
        [DataMember(Name="cancellationPolicyList", EmitDefaultValue=true)]
        public List<PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerCancellationPolicyListInner> CancellationPolicyList { get; set; }

        /// <summary>
        /// The minimum number of days in advance a booking must be made
        /// </summary>
        /// <value>The minimum number of days in advance a booking must be made</value>
        [DataMember(Name="advanceBookingMin", EmitDefaultValue=true)]
        public decimal AdvanceBookingMin { get; set; }

        /// <summary>
        /// The maximum number of days in advance a booking can be made
        /// </summary>
        /// <value>The maximum number of days in advance a booking can be made</value>
        [DataMember(Name="advanceBookingMax", EmitDefaultValue=true)]
        public decimal AdvanceBookingMax { get; set; }

        /// <summary>
        /// Gets or Sets PetsPolicy
        /// </summary>
        [DataMember(Name="petsPolicy", EmitDefaultValue=false)]
        public PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerPetsPolicy PetsPolicy { get; set; }


        /// <summary>
        /// Gets or Sets GuaranteePolicy
        /// </summary>
        [DataMember(Name="guaranteePolicy", EmitDefaultValue=false)]
        public PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerGuaranteePolicy GuaranteePolicy { get; set; }

        /// <summary>
        /// A list of taxes and their policies.
        /// </summary>
        /// <value>A list of taxes and their policies.</value>
        [DataMember(Name="taxPolicyList", EmitDefaultValue=true)]
        public List<PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerTaxPolicyListInner> TaxPolicyList { get; set; }

        /// <summary>
        /// A list of fees and their policies.
        /// </summary>
        /// <value>A list of fees and their policies.</value>
        [DataMember(Name="feePolicyList", EmitDefaultValue=true)]
        public List<PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerFeePolicyListInner> FeePolicyList { get; set; }

        /// <summary>
        /// The name of this policy.
        /// </summary>
        /// <value>The name of this policy.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PropertiesPropertyIdGet200ResponseProductListInnerPolicyInfo {\n");
            sb.Append("  CheckInTime: ").Append(CheckInTime).Append("\n");
            sb.Append("  CheckOutTime: ").Append(CheckOutTime).Append("\n");
            sb.Append("  TotalGuestCount: ").Append(TotalGuestCount).Append("\n");
            sb.Append("  CancellationPolicyList: ").Append(CancellationPolicyList).Append("\n");
            sb.Append("  AdvanceBookingMin: ").Append(AdvanceBookingMin).Append("\n");
            sb.Append("  AdvanceBookingMax: ").Append(AdvanceBookingMax).Append("\n");
            sb.Append("  PetsPolicy: ").Append(PetsPolicy).Append("\n");
            sb.Append("  PrepaymentPolicy: ").Append(PrepaymentPolicy).Append("\n");
            sb.Append("  GuaranteePolicy: ").Append(GuaranteePolicy).Append("\n");
            sb.Append("  TaxPolicyList: ").Append(TaxPolicyList).Append("\n");
            sb.Append("  FeePolicyList: ").Append(FeePolicyList).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PropertiesPropertyIdGet200ResponseProductListInnerPolicyInfo);
        }

        /// <summary>
        /// Returns true if PropertiesPropertyIdGet200ResponseProductListInnerPolicyInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of PropertiesPropertyIdGet200ResponseProductListInnerPolicyInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PropertiesPropertyIdGet200ResponseProductListInnerPolicyInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CheckInTime == input.CheckInTime ||
                    (this.CheckInTime != null &&
                    this.CheckInTime.Equals(input.CheckInTime))
                ) && 
                (
                    this.CheckOutTime == input.CheckOutTime ||
                    (this.CheckOutTime != null &&
                    this.CheckOutTime.Equals(input.CheckOutTime))
                ) && 
                (
                    this.TotalGuestCount == input.TotalGuestCount ||
                    (this.TotalGuestCount != null &&
                    this.TotalGuestCount.Equals(input.TotalGuestCount))
                ) && 
                (
                    this.CancellationPolicyList == input.CancellationPolicyList ||
                    this.CancellationPolicyList != null &&
                    input.CancellationPolicyList != null &&
                    this.CancellationPolicyList.SequenceEqual(input.CancellationPolicyList)
                ) && 
                (
                    this.AdvanceBookingMin == input.AdvanceBookingMin ||
                    (this.AdvanceBookingMin != null &&
                    this.AdvanceBookingMin.Equals(input.AdvanceBookingMin))
                ) && 
                (
                    this.AdvanceBookingMax == input.AdvanceBookingMax ||
                    (this.AdvanceBookingMax != null &&
                    this.AdvanceBookingMax.Equals(input.AdvanceBookingMax))
                ) && 
                (
                    this.PetsPolicy == input.PetsPolicy ||
                    (this.PetsPolicy != null &&
                    this.PetsPolicy.Equals(input.PetsPolicy))
                ) && 
                (
                    this.PrepaymentPolicy == input.PrepaymentPolicy ||
                    (this.PrepaymentPolicy != null &&
                    this.PrepaymentPolicy.Equals(input.PrepaymentPolicy))
                ) && 
                (
                    this.GuaranteePolicy == input.GuaranteePolicy ||
                    (this.GuaranteePolicy != null &&
                    this.GuaranteePolicy.Equals(input.GuaranteePolicy))
                ) && 
                (
                    this.TaxPolicyList == input.TaxPolicyList ||
                    this.TaxPolicyList != null &&
                    input.TaxPolicyList != null &&
                    this.TaxPolicyList.SequenceEqual(input.TaxPolicyList)
                ) && 
                (
                    this.FeePolicyList == input.FeePolicyList ||
                    this.FeePolicyList != null &&
                    input.FeePolicyList != null &&
                    this.FeePolicyList.SequenceEqual(input.FeePolicyList)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CheckInTime != null)
                    hashCode = hashCode * 59 + this.CheckInTime.GetHashCode();
                if (this.CheckOutTime != null)
                    hashCode = hashCode * 59 + this.CheckOutTime.GetHashCode();
                if (this.TotalGuestCount != null)
                    hashCode = hashCode * 59 + this.TotalGuestCount.GetHashCode();
                if (this.CancellationPolicyList != null)
                    hashCode = hashCode * 59 + this.CancellationPolicyList.GetHashCode();
                if (this.AdvanceBookingMin != null)
                    hashCode = hashCode * 59 + this.AdvanceBookingMin.GetHashCode();
                if (this.AdvanceBookingMax != null)
                    hashCode = hashCode * 59 + this.AdvanceBookingMax.GetHashCode();
                if (this.PetsPolicy != null)
                    hashCode = hashCode * 59 + this.PetsPolicy.GetHashCode();
                if (this.PrepaymentPolicy != null)
                    hashCode = hashCode * 59 + this.PrepaymentPolicy.GetHashCode();
                if (this.GuaranteePolicy != null)
                    hashCode = hashCode * 59 + this.GuaranteePolicy.GetHashCode();
                if (this.TaxPolicyList != null)
                    hashCode = hashCode * 59 + this.TaxPolicyList.GetHashCode();
                if (this.FeePolicyList != null)
                    hashCode = hashCode * 59 + this.FeePolicyList.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
