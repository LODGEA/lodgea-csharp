/*
 * lodgea-csharp
 *
 * LODGEA SDK for csharp. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@lodgea.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lodgea-csharp.Client.OpenAPIDateConverter;

namespace lodgea-csharp.com.lodgea.model
{
    /// <summary>
    /// PropertiesPropertyIdGet200ResponsePropertyContactListInner
    /// </summary>
    [DataContract]
    public partial class PropertiesPropertyIdGet200ResponsePropertyContactListInner :  IEquatable<PropertiesPropertyIdGet200ResponsePropertyContactListInner>, IValidatableObject
    {
        /// <summary>
        /// The type of profile this contact belongs to.
        /// </summary>
        /// <value>The type of profile this contact belongs to.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProfileTypeEnum
        {
            /// <summary>
            /// Enum General for value: general
            /// </summary>
            [EnumMember(Value = "general")]
            General = 1,

            /// <summary>
            /// Enum Contract for value: contract
            /// </summary>
            [EnumMember(Value = "contract")]
            Contract = 2,

            /// <summary>
            /// Enum Reservations for value: reservations
            /// </summary>
            [EnumMember(Value = "reservations")]
            Reservations = 3,

            /// <summary>
            /// Enum Invoices for value: invoices
            /// </summary>
            [EnumMember(Value = "invoices")]
            Invoices = 4,

            /// <summary>
            /// Enum Availability for value: availability
            /// </summary>
            [EnumMember(Value = "availability")]
            Availability = 5,

            /// <summary>
            /// Enum Sitecontent for value: site_content
            /// </summary>
            [EnumMember(Value = "site_content")]
            Sitecontent = 6,

            /// <summary>
            /// Enum Parity for value: parity
            /// </summary>
            [EnumMember(Value = "parity")]
            Parity = 7,

            /// <summary>
            /// Enum Requests for value: requests
            /// </summary>
            [EnumMember(Value = "requests")]
            Requests = 8,

            /// <summary>
            /// Enum Centralreservations for value: central_reservations
            /// </summary>
            [EnumMember(Value = "central_reservations")]
            Centralreservations = 9,

            /// <summary>
            /// Enum Physicallocation for value: physicallocation
            /// </summary>
            [EnumMember(Value = "physicallocation")]
            Physicallocation = 10

        }

        /// <summary>
        /// The type of profile this contact belongs to.
        /// </summary>
        /// <value>The type of profile this contact belongs to.</value>
        [DataMember(Name="profileType", EmitDefaultValue=true)]
        public ProfileTypeEnum ProfileType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertiesPropertyIdGet200ResponsePropertyContactListInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PropertiesPropertyIdGet200ResponsePropertyContactListInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertiesPropertyIdGet200ResponsePropertyContactListInner" /> class.
        /// </summary>
        /// <param name="profileType">The type of profile this contact belongs to. (required).</param>
        /// <param name="addressList">A list of addresses for this contact (required).</param>
        public PropertiesPropertyIdGet200ResponsePropertyContactListInner(ProfileTypeEnum profileType = default(ProfileTypeEnum), List<PropertiesPropertyIdGet200ResponsePropertyContactListInnerAddressListInner> addressList = default(List<PropertiesPropertyIdGet200ResponsePropertyContactListInnerAddressListInner>))
        {
            // to ensure "profileType" is required (not null)
            if (profileType == null)
            {
                throw new InvalidDataException("profileType is a required property for PropertiesPropertyIdGet200ResponsePropertyContactListInner and cannot be null");
            }
            else
            {
                this.ProfileType = profileType;
            }

            // to ensure "addressList" is required (not null)
            if (addressList == null)
            {
                throw new InvalidDataException("addressList is a required property for PropertiesPropertyIdGet200ResponsePropertyContactListInner and cannot be null");
            }
            else
            {
                this.AddressList = addressList;
            }

        }


        /// <summary>
        /// A list of addresses for this contact
        /// </summary>
        /// <value>A list of addresses for this contact</value>
        [DataMember(Name="addressList", EmitDefaultValue=true)]
        public List<PropertiesPropertyIdGet200ResponsePropertyContactListInnerAddressListInner> AddressList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PropertiesPropertyIdGet200ResponsePropertyContactListInner {\n");
            sb.Append("  ProfileType: ").Append(ProfileType).Append("\n");
            sb.Append("  AddressList: ").Append(AddressList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PropertiesPropertyIdGet200ResponsePropertyContactListInner);
        }

        /// <summary>
        /// Returns true if PropertiesPropertyIdGet200ResponsePropertyContactListInner instances are equal
        /// </summary>
        /// <param name="input">Instance of PropertiesPropertyIdGet200ResponsePropertyContactListInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PropertiesPropertyIdGet200ResponsePropertyContactListInner input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProfileType == input.ProfileType ||
                    (this.ProfileType != null &&
                    this.ProfileType.Equals(input.ProfileType))
                ) && 
                (
                    this.AddressList == input.AddressList ||
                    this.AddressList != null &&
                    input.AddressList != null &&
                    this.AddressList.SequenceEqual(input.AddressList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProfileType != null)
                    hashCode = hashCode * 59 + this.ProfileType.GetHashCode();
                if (this.AddressList != null)
                    hashCode = hashCode * 59 + this.AddressList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
