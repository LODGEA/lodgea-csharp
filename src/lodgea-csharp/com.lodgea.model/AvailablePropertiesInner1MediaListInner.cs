/*
 * lodgea-csharp
 *
 * LODGEA SDK for csharp. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@lodgea.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lodgea-csharp.Client.OpenAPIDateConverter;

namespace lodgea-csharp.com.lodgea.model
{
    /// <summary>
    /// AvailablePropertiesInner1MediaListInner
    /// </summary>
    [DataContract]
    public partial class AvailablePropertiesInner1MediaListInner :  IEquatable<AvailablePropertiesInner1MediaListInner>, IValidatableObject
    {
        /// <summary>
        /// Defines TagList
        /// </summary>
        public enum TagListEnum
        {
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1 = 1,

            /// <summary>
            /// Enum _2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")]
            _2 = 2,

            /// <summary>
            /// Enum _3 for value: 3
            /// </summary>
            [EnumMember(Value = "3")]
            _3 = 3,

            /// <summary>
            /// Enum _4 for value: 4
            /// </summary>
            [EnumMember(Value = "4")]
            _4 = 4,

            /// <summary>
            /// Enum _5 for value: 5
            /// </summary>
            [EnumMember(Value = "5")]
            _5 = 5,

            /// <summary>
            /// Enum _6 for value: 6
            /// </summary>
            [EnumMember(Value = "6")]
            _6 = 6,

            /// <summary>
            /// Enum _7 for value: 7
            /// </summary>
            [EnumMember(Value = "7")]
            _7 = 7,

            /// <summary>
            /// Enum _8 for value: 8
            /// </summary>
            [EnumMember(Value = "8")]
            _8 = 8,

            /// <summary>
            /// Enum _10 for value: 10
            /// </summary>
            [EnumMember(Value = "10")]
            _10 = 9,

            /// <summary>
            /// Enum _11 for value: 11
            /// </summary>
            [EnumMember(Value = "11")]
            _11 = 10,

            /// <summary>
            /// Enum _13 for value: 13
            /// </summary>
            [EnumMember(Value = "13")]
            _13 = 11,

            /// <summary>
            /// Enum _14 for value: 14
            /// </summary>
            [EnumMember(Value = "14")]
            _14 = 12,

            /// <summary>
            /// Enum _37 for value: 37
            /// </summary>
            [EnumMember(Value = "37")]
            _37 = 13,

            /// <summary>
            /// Enum _41 for value: 41
            /// </summary>
            [EnumMember(Value = "41")]
            _41 = 14,

            /// <summary>
            /// Enum _42 for value: 42
            /// </summary>
            [EnumMember(Value = "42")]
            _42 = 15,

            /// <summary>
            /// Enum _43 for value: 43
            /// </summary>
            [EnumMember(Value = "43")]
            _43 = 16,

            /// <summary>
            /// Enum _50 for value: 50
            /// </summary>
            [EnumMember(Value = "50")]
            _50 = 17,

            /// <summary>
            /// Enum _55 for value: 55
            /// </summary>
            [EnumMember(Value = "55")]
            _55 = 18,

            /// <summary>
            /// Enum _61 for value: 61
            /// </summary>
            [EnumMember(Value = "61")]
            _61 = 19,

            /// <summary>
            /// Enum _70 for value: 70
            /// </summary>
            [EnumMember(Value = "70")]
            _70 = 20,

            /// <summary>
            /// Enum _74 for value: 74
            /// </summary>
            [EnumMember(Value = "74")]
            _74 = 21,

            /// <summary>
            /// Enum _81 for value: 81
            /// </summary>
            [EnumMember(Value = "81")]
            _81 = 22,

            /// <summary>
            /// Enum _82 for value: 82
            /// </summary>
            [EnumMember(Value = "82")]
            _82 = 23,

            /// <summary>
            /// Enum _87 for value: 87
            /// </summary>
            [EnumMember(Value = "87")]
            _87 = 24,

            /// <summary>
            /// Enum _89 for value: 89
            /// </summary>
            [EnumMember(Value = "89")]
            _89 = 25,

            /// <summary>
            /// Enum _90 for value: 90
            /// </summary>
            [EnumMember(Value = "90")]
            _90 = 26,

            /// <summary>
            /// Enum _94 for value: 94
            /// </summary>
            [EnumMember(Value = "94")]
            _94 = 27,

            /// <summary>
            /// Enum _95 for value: 95
            /// </summary>
            [EnumMember(Value = "95")]
            _95 = 28,

            /// <summary>
            /// Enum _96 for value: 96
            /// </summary>
            [EnumMember(Value = "96")]
            _96 = 29,

            /// <summary>
            /// Enum _97 for value: 97
            /// </summary>
            [EnumMember(Value = "97")]
            _97 = 30,

            /// <summary>
            /// Enum _100 for value: 100
            /// </summary>
            [EnumMember(Value = "100")]
            _100 = 31,

            /// <summary>
            /// Enum _102 for value: 102
            /// </summary>
            [EnumMember(Value = "102")]
            _102 = 32,

            /// <summary>
            /// Enum _103 for value: 103
            /// </summary>
            [EnumMember(Value = "103")]
            _103 = 33,

            /// <summary>
            /// Enum _104 for value: 104
            /// </summary>
            [EnumMember(Value = "104")]
            _104 = 34,

            /// <summary>
            /// Enum _106 for value: 106
            /// </summary>
            [EnumMember(Value = "106")]
            _106 = 35,

            /// <summary>
            /// Enum _107 for value: 107
            /// </summary>
            [EnumMember(Value = "107")]
            _107 = 36,

            /// <summary>
            /// Enum _108 for value: 108
            /// </summary>
            [EnumMember(Value = "108")]
            _108 = 37,

            /// <summary>
            /// Enum _112 for value: 112
            /// </summary>
            [EnumMember(Value = "112")]
            _112 = 38,

            /// <summary>
            /// Enum _113 for value: 113
            /// </summary>
            [EnumMember(Value = "113")]
            _113 = 39,

            /// <summary>
            /// Enum _114 for value: 114
            /// </summary>
            [EnumMember(Value = "114")]
            _114 = 40,

            /// <summary>
            /// Enum _115 for value: 115
            /// </summary>
            [EnumMember(Value = "115")]
            _115 = 41,

            /// <summary>
            /// Enum _116 for value: 116
            /// </summary>
            [EnumMember(Value = "116")]
            _116 = 42,

            /// <summary>
            /// Enum _124 for value: 124
            /// </summary>
            [EnumMember(Value = "124")]
            _124 = 43,

            /// <summary>
            /// Enum _125 for value: 125
            /// </summary>
            [EnumMember(Value = "125")]
            _125 = 44,

            /// <summary>
            /// Enum _128 for value: 128
            /// </summary>
            [EnumMember(Value = "128")]
            _128 = 45,

            /// <summary>
            /// Enum _131 for value: 131
            /// </summary>
            [EnumMember(Value = "131")]
            _131 = 46,

            /// <summary>
            /// Enum _133 for value: 133
            /// </summary>
            [EnumMember(Value = "133")]
            _133 = 47,

            /// <summary>
            /// Enum _134 for value: 134
            /// </summary>
            [EnumMember(Value = "134")]
            _134 = 48,

            /// <summary>
            /// Enum _137 for value: 137
            /// </summary>
            [EnumMember(Value = "137")]
            _137 = 49,

            /// <summary>
            /// Enum _141 for value: 141
            /// </summary>
            [EnumMember(Value = "141")]
            _141 = 50,

            /// <summary>
            /// Enum _143 for value: 143
            /// </summary>
            [EnumMember(Value = "143")]
            _143 = 51,

            /// <summary>
            /// Enum _153 for value: 153
            /// </summary>
            [EnumMember(Value = "153")]
            _153 = 52,

            /// <summary>
            /// Enum _154 for value: 154
            /// </summary>
            [EnumMember(Value = "154")]
            _154 = 53,

            /// <summary>
            /// Enum _155 for value: 155
            /// </summary>
            [EnumMember(Value = "155")]
            _155 = 54,

            /// <summary>
            /// Enum _156 for value: 156
            /// </summary>
            [EnumMember(Value = "156")]
            _156 = 55,

            /// <summary>
            /// Enum _157 for value: 157
            /// </summary>
            [EnumMember(Value = "157")]
            _157 = 56,

            /// <summary>
            /// Enum _158 for value: 158
            /// </summary>
            [EnumMember(Value = "158")]
            _158 = 57,

            /// <summary>
            /// Enum _159 for value: 159
            /// </summary>
            [EnumMember(Value = "159")]
            _159 = 58,

            /// <summary>
            /// Enum _160 for value: 160
            /// </summary>
            [EnumMember(Value = "160")]
            _160 = 59,

            /// <summary>
            /// Enum _161 for value: 161
            /// </summary>
            [EnumMember(Value = "161")]
            _161 = 60,

            /// <summary>
            /// Enum _164 for value: 164
            /// </summary>
            [EnumMember(Value = "164")]
            _164 = 61,

            /// <summary>
            /// Enum _165 for value: 165
            /// </summary>
            [EnumMember(Value = "165")]
            _165 = 62,

            /// <summary>
            /// Enum _167 for value: 167
            /// </summary>
            [EnumMember(Value = "167")]
            _167 = 63,

            /// <summary>
            /// Enum _172 for value: 172
            /// </summary>
            [EnumMember(Value = "172")]
            _172 = 64,

            /// <summary>
            /// Enum _173 for value: 173
            /// </summary>
            [EnumMember(Value = "173")]
            _173 = 65,

            /// <summary>
            /// Enum _177 for value: 177
            /// </summary>
            [EnumMember(Value = "177")]
            _177 = 66,

            /// <summary>
            /// Enum _178 for value: 178
            /// </summary>
            [EnumMember(Value = "178")]
            _178 = 67,

            /// <summary>
            /// Enum _179 for value: 179
            /// </summary>
            [EnumMember(Value = "179")]
            _179 = 68,

            /// <summary>
            /// Enum _182 for value: 182
            /// </summary>
            [EnumMember(Value = "182")]
            _182 = 69,

            /// <summary>
            /// Enum _183 for value: 183
            /// </summary>
            [EnumMember(Value = "183")]
            _183 = 70,

            /// <summary>
            /// Enum _184 for value: 184
            /// </summary>
            [EnumMember(Value = "184")]
            _184 = 71,

            /// <summary>
            /// Enum _185 for value: 185
            /// </summary>
            [EnumMember(Value = "185")]
            _185 = 72,

            /// <summary>
            /// Enum _186 for value: 186
            /// </summary>
            [EnumMember(Value = "186")]
            _186 = 73,

            /// <summary>
            /// Enum _187 for value: 187
            /// </summary>
            [EnumMember(Value = "187")]
            _187 = 74,

            /// <summary>
            /// Enum _188 for value: 188
            /// </summary>
            [EnumMember(Value = "188")]
            _188 = 75,

            /// <summary>
            /// Enum _189 for value: 189
            /// </summary>
            [EnumMember(Value = "189")]
            _189 = 76,

            /// <summary>
            /// Enum _190 for value: 190
            /// </summary>
            [EnumMember(Value = "190")]
            _190 = 77,

            /// <summary>
            /// Enum _191 for value: 191
            /// </summary>
            [EnumMember(Value = "191")]
            _191 = 78,

            /// <summary>
            /// Enum _192 for value: 192
            /// </summary>
            [EnumMember(Value = "192")]
            _192 = 79,

            /// <summary>
            /// Enum _193 for value: 193
            /// </summary>
            [EnumMember(Value = "193")]
            _193 = 80,

            /// <summary>
            /// Enum _194 for value: 194
            /// </summary>
            [EnumMember(Value = "194")]
            _194 = 81,

            /// <summary>
            /// Enum _197 for value: 197
            /// </summary>
            [EnumMember(Value = "197")]
            _197 = 82,

            /// <summary>
            /// Enum _198 for value: 198
            /// </summary>
            [EnumMember(Value = "198")]
            _198 = 83,

            /// <summary>
            /// Enum _199 for value: 199
            /// </summary>
            [EnumMember(Value = "199")]
            _199 = 84,

            /// <summary>
            /// Enum _204 for value: 204
            /// </summary>
            [EnumMember(Value = "204")]
            _204 = 85,

            /// <summary>
            /// Enum _205 for value: 205
            /// </summary>
            [EnumMember(Value = "205")]
            _205 = 86,

            /// <summary>
            /// Enum _240 for value: 240
            /// </summary>
            [EnumMember(Value = "240")]
            _240 = 87,

            /// <summary>
            /// Enum _241 for value: 241
            /// </summary>
            [EnumMember(Value = "241")]
            _241 = 88,

            /// <summary>
            /// Enum _242 for value: 242
            /// </summary>
            [EnumMember(Value = "242")]
            _242 = 89,

            /// <summary>
            /// Enum _245 for value: 245
            /// </summary>
            [EnumMember(Value = "245")]
            _245 = 90,

            /// <summary>
            /// Enum _246 for value: 246
            /// </summary>
            [EnumMember(Value = "246")]
            _246 = 91,

            /// <summary>
            /// Enum _247 for value: 247
            /// </summary>
            [EnumMember(Value = "247")]
            _247 = 92,

            /// <summary>
            /// Enum _248 for value: 248
            /// </summary>
            [EnumMember(Value = "248")]
            _248 = 93,

            /// <summary>
            /// Enum _249 for value: 249
            /// </summary>
            [EnumMember(Value = "249")]
            _249 = 94,

            /// <summary>
            /// Enum _250 for value: 250
            /// </summary>
            [EnumMember(Value = "250")]
            _250 = 95,

            /// <summary>
            /// Enum _251 for value: 251
            /// </summary>
            [EnumMember(Value = "251")]
            _251 = 96,

            /// <summary>
            /// Enum _252 for value: 252
            /// </summary>
            [EnumMember(Value = "252")]
            _252 = 97,

            /// <summary>
            /// Enum _253 for value: 253
            /// </summary>
            [EnumMember(Value = "253")]
            _253 = 98,

            /// <summary>
            /// Enum _254 for value: 254
            /// </summary>
            [EnumMember(Value = "254")]
            _254 = 99,

            /// <summary>
            /// Enum _255 for value: 255
            /// </summary>
            [EnumMember(Value = "255")]
            _255 = 100,

            /// <summary>
            /// Enum _256 for value: 256
            /// </summary>
            [EnumMember(Value = "256")]
            _256 = 101,

            /// <summary>
            /// Enum _257 for value: 257
            /// </summary>
            [EnumMember(Value = "257")]
            _257 = 102,

            /// <summary>
            /// Enum _258 for value: 258
            /// </summary>
            [EnumMember(Value = "258")]
            _258 = 103,

            /// <summary>
            /// Enum _259 for value: 259
            /// </summary>
            [EnumMember(Value = "259")]
            _259 = 104,

            /// <summary>
            /// Enum _260 for value: 260
            /// </summary>
            [EnumMember(Value = "260")]
            _260 = 105,

            /// <summary>
            /// Enum _261 for value: 261
            /// </summary>
            [EnumMember(Value = "261")]
            _261 = 106,

            /// <summary>
            /// Enum _262 for value: 262
            /// </summary>
            [EnumMember(Value = "262")]
            _262 = 107,

            /// <summary>
            /// Enum _263 for value: 263
            /// </summary>
            [EnumMember(Value = "263")]
            _263 = 108,

            /// <summary>
            /// Enum _264 for value: 264
            /// </summary>
            [EnumMember(Value = "264")]
            _264 = 109,

            /// <summary>
            /// Enum _265 for value: 265
            /// </summary>
            [EnumMember(Value = "265")]
            _265 = 110,

            /// <summary>
            /// Enum _266 for value: 266
            /// </summary>
            [EnumMember(Value = "266")]
            _266 = 111,

            /// <summary>
            /// Enum _267 for value: 267
            /// </summary>
            [EnumMember(Value = "267")]
            _267 = 112,

            /// <summary>
            /// Enum _268 for value: 268
            /// </summary>
            [EnumMember(Value = "268")]
            _268 = 113,

            /// <summary>
            /// Enum _269 for value: 269
            /// </summary>
            [EnumMember(Value = "269")]
            _269 = 114,

            /// <summary>
            /// Enum _270 for value: 270
            /// </summary>
            [EnumMember(Value = "270")]
            _270 = 115,

            /// <summary>
            /// Enum _271 for value: 271
            /// </summary>
            [EnumMember(Value = "271")]
            _271 = 116,

            /// <summary>
            /// Enum _272 for value: 272
            /// </summary>
            [EnumMember(Value = "272")]
            _272 = 117,

            /// <summary>
            /// Enum _273 for value: 273
            /// </summary>
            [EnumMember(Value = "273")]
            _273 = 118,

            /// <summary>
            /// Enum _276 for value: 276
            /// </summary>
            [EnumMember(Value = "276")]
            _276 = 119,

            /// <summary>
            /// Enum _277 for value: 277
            /// </summary>
            [EnumMember(Value = "277")]
            _277 = 120,

            /// <summary>
            /// Enum _278 for value: 278
            /// </summary>
            [EnumMember(Value = "278")]
            _278 = 121,

            /// <summary>
            /// Enum _279 for value: 279
            /// </summary>
            [EnumMember(Value = "279")]
            _279 = 122,

            /// <summary>
            /// Enum _280 for value: 280
            /// </summary>
            [EnumMember(Value = "280")]
            _280 = 123,

            /// <summary>
            /// Enum _281 for value: 281
            /// </summary>
            [EnumMember(Value = "281")]
            _281 = 124,

            /// <summary>
            /// Enum _282 for value: 282
            /// </summary>
            [EnumMember(Value = "282")]
            _282 = 125,

            /// <summary>
            /// Enum _283 for value: 283
            /// </summary>
            [EnumMember(Value = "283")]
            _283 = 126,

            /// <summary>
            /// Enum _284 for value: 284
            /// </summary>
            [EnumMember(Value = "284")]
            _284 = 127,

            /// <summary>
            /// Enum _285 for value: 285
            /// </summary>
            [EnumMember(Value = "285")]
            _285 = 128,

            /// <summary>
            /// Enum _286 for value: 286
            /// </summary>
            [EnumMember(Value = "286")]
            _286 = 129,

            /// <summary>
            /// Enum _287 for value: 287
            /// </summary>
            [EnumMember(Value = "287")]
            _287 = 130,

            /// <summary>
            /// Enum _289 for value: 289
            /// </summary>
            [EnumMember(Value = "289")]
            _289 = 131,

            /// <summary>
            /// Enum _290 for value: 290
            /// </summary>
            [EnumMember(Value = "290")]
            _290 = 132,

            /// <summary>
            /// Enum _291 for value: 291
            /// </summary>
            [EnumMember(Value = "291")]
            _291 = 133

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AvailablePropertiesInner1MediaListInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AvailablePropertiesInner1MediaListInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AvailablePropertiesInner1MediaListInner" /> class.
        /// </summary>
        /// <param name="tagList">A list of tag codes for the media.&lt;p&gt;See also &lt;a href&#x3D;\&quot;#imagetype-codes\&quot;&gt;in the appendix&lt;/a&gt;.&lt;/p&gt; (required).</param>
        /// <param name="isMainImage">Whether the media is the main image for the property. (required).</param>
        /// <param name="url">The URL for the media. (required).</param>
        /// <param name="sortOrder">The sort order for the media. (required).</param>
        public AvailablePropertiesInner1MediaListInner(List<TagListEnum> tagList = default(List<TagListEnum>), bool isMainImage = default(bool), string url = default(string), decimal sortOrder = default(decimal))
        {
            // to ensure "tagList" is required (not null)
            if (tagList == null)
            {
                throw new InvalidDataException("tagList is a required property for AvailablePropertiesInner1MediaListInner and cannot be null");
            }
            else
            {
                this.TagList = tagList;
            }

            // to ensure "isMainImage" is required (not null)
            if (isMainImage == null)
            {
                throw new InvalidDataException("isMainImage is a required property for AvailablePropertiesInner1MediaListInner and cannot be null");
            }
            else
            {
                this.IsMainImage = isMainImage;
            }

            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new InvalidDataException("url is a required property for AvailablePropertiesInner1MediaListInner and cannot be null");
            }
            else
            {
                this.Url = url;
            }

            // to ensure "sortOrder" is required (not null)
            if (sortOrder == null)
            {
                throw new InvalidDataException("sortOrder is a required property for AvailablePropertiesInner1MediaListInner and cannot be null");
            }
            else
            {
                this.SortOrder = sortOrder;
            }

        }

        /// <summary>
        /// A list of tag codes for the media.&lt;p&gt;See also &lt;a href&#x3D;\&quot;#imagetype-codes\&quot;&gt;in the appendix&lt;/a&gt;.&lt;/p&gt;
        /// </summary>
        /// <value>A list of tag codes for the media.&lt;p&gt;See also &lt;a href&#x3D;\&quot;#imagetype-codes\&quot;&gt;in the appendix&lt;/a&gt;.&lt;/p&gt;</value>
        [DataMember(Name="tagList", EmitDefaultValue=true)]
        public List<AvailablePropertiesInner1MediaListInner.TagListEnum> TagList { get; set; }

        /// <summary>
        /// Whether the media is the main image for the property.
        /// </summary>
        /// <value>Whether the media is the main image for the property.</value>
        [DataMember(Name="isMainImage", EmitDefaultValue=true)]
        public bool IsMainImage { get; set; }

        /// <summary>
        /// The URL for the media.
        /// </summary>
        /// <value>The URL for the media.</value>
        [DataMember(Name="url", EmitDefaultValue=true)]
        public string Url { get; set; }

        /// <summary>
        /// The sort order for the media.
        /// </summary>
        /// <value>The sort order for the media.</value>
        [DataMember(Name="sortOrder", EmitDefaultValue=true)]
        public decimal SortOrder { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AvailablePropertiesInner1MediaListInner {\n");
            sb.Append("  TagList: ").Append(TagList).Append("\n");
            sb.Append("  IsMainImage: ").Append(IsMainImage).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AvailablePropertiesInner1MediaListInner);
        }

        /// <summary>
        /// Returns true if AvailablePropertiesInner1MediaListInner instances are equal
        /// </summary>
        /// <param name="input">Instance of AvailablePropertiesInner1MediaListInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AvailablePropertiesInner1MediaListInner input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TagList == input.TagList ||
                    this.TagList != null &&
                    input.TagList != null &&
                    this.TagList.SequenceEqual(input.TagList)
                ) && 
                (
                    this.IsMainImage == input.IsMainImage ||
                    (this.IsMainImage != null &&
                    this.IsMainImage.Equals(input.IsMainImage))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.SortOrder == input.SortOrder ||
                    (this.SortOrder != null &&
                    this.SortOrder.Equals(input.SortOrder))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TagList != null)
                    hashCode = hashCode * 59 + this.TagList.GetHashCode();
                if (this.IsMainImage != null)
                    hashCode = hashCode * 59 + this.IsMainImage.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.SortOrder != null)
                    hashCode = hashCode * 59 + this.SortOrder.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
