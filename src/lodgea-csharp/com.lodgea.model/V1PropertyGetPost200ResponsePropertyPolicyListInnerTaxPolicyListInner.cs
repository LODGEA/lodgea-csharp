/*
 * lodgea-csharp
 *
 * LODGEA SDK for CSharp. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: support@lodgea.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lodgea-csharp.Client.OpenAPIDateConverter;

namespace lodgea-csharp.com.lodgea.model
{
    /// <summary>
    /// V1PropertyGetPost200ResponsePropertyPolicyListInnerTaxPolicyListInner
    /// </summary>
    [DataContract]
    public partial class V1PropertyGetPost200ResponsePropertyPolicyListInnerTaxPolicyListInner :  IEquatable<V1PropertyGetPost200ResponsePropertyPolicyListInnerTaxPolicyListInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1PropertyGetPost200ResponsePropertyPolicyListInnerTaxPolicyListInner" /> class.
        /// </summary>
        /// <param name="typeCode">typeCode.</param>
        /// <param name="percent">percent.</param>
        /// <param name="chargeType">chargeType.</param>
        /// <param name="chargeFrequencyCode">chargeFrequencyCode.</param>
        /// <param name="currencyCode">currencyCode.</param>
        /// <param name="conditionList">conditionList.</param>
        public V1PropertyGetPost200ResponsePropertyPolicyListInnerTaxPolicyListInner(decimal typeCode = default(decimal), decimal percent = default(decimal), string chargeType = default(string), decimal chargeFrequencyCode = default(decimal), string currencyCode = default(string), List<string> conditionList = default(List<string>))
        {
            this.TypeCode = typeCode;
            this.Percent = percent;
            this.ChargeType = chargeType;
            this.ChargeFrequencyCode = chargeFrequencyCode;
            this.CurrencyCode = currencyCode;
            this.ConditionList = conditionList;
        }

        /// <summary>
        /// Gets or Sets TypeCode
        /// </summary>
        [DataMember(Name="typeCode", EmitDefaultValue=false)]
        public decimal TypeCode { get; set; }

        /// <summary>
        /// Gets or Sets Percent
        /// </summary>
        [DataMember(Name="percent", EmitDefaultValue=false)]
        public decimal Percent { get; set; }

        /// <summary>
        /// Gets or Sets ChargeType
        /// </summary>
        [DataMember(Name="chargeType", EmitDefaultValue=false)]
        public string ChargeType { get; set; }

        /// <summary>
        /// Gets or Sets ChargeFrequencyCode
        /// </summary>
        [DataMember(Name="chargeFrequencyCode", EmitDefaultValue=false)]
        public decimal ChargeFrequencyCode { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets ConditionList
        /// </summary>
        [DataMember(Name="conditionList", EmitDefaultValue=false)]
        public List<string> ConditionList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1PropertyGetPost200ResponsePropertyPolicyListInnerTaxPolicyListInner {\n");
            sb.Append("  TypeCode: ").Append(TypeCode).Append("\n");
            sb.Append("  Percent: ").Append(Percent).Append("\n");
            sb.Append("  ChargeType: ").Append(ChargeType).Append("\n");
            sb.Append("  ChargeFrequencyCode: ").Append(ChargeFrequencyCode).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  ConditionList: ").Append(ConditionList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as V1PropertyGetPost200ResponsePropertyPolicyListInnerTaxPolicyListInner);
        }

        /// <summary>
        /// Returns true if V1PropertyGetPost200ResponsePropertyPolicyListInnerTaxPolicyListInner instances are equal
        /// </summary>
        /// <param name="input">Instance of V1PropertyGetPost200ResponsePropertyPolicyListInnerTaxPolicyListInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1PropertyGetPost200ResponsePropertyPolicyListInnerTaxPolicyListInner input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TypeCode == input.TypeCode ||
                    (this.TypeCode != null &&
                    this.TypeCode.Equals(input.TypeCode))
                ) && 
                (
                    this.Percent == input.Percent ||
                    (this.Percent != null &&
                    this.Percent.Equals(input.Percent))
                ) && 
                (
                    this.ChargeType == input.ChargeType ||
                    (this.ChargeType != null &&
                    this.ChargeType.Equals(input.ChargeType))
                ) && 
                (
                    this.ChargeFrequencyCode == input.ChargeFrequencyCode ||
                    (this.ChargeFrequencyCode != null &&
                    this.ChargeFrequencyCode.Equals(input.ChargeFrequencyCode))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.ConditionList == input.ConditionList ||
                    this.ConditionList != null &&
                    input.ConditionList != null &&
                    this.ConditionList.SequenceEqual(input.ConditionList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TypeCode != null)
                    hashCode = hashCode * 59 + this.TypeCode.GetHashCode();
                if (this.Percent != null)
                    hashCode = hashCode * 59 + this.Percent.GetHashCode();
                if (this.ChargeType != null)
                    hashCode = hashCode * 59 + this.ChargeType.GetHashCode();
                if (this.ChargeFrequencyCode != null)
                    hashCode = hashCode * 59 + this.ChargeFrequencyCode.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.ConditionList != null)
                    hashCode = hashCode * 59 + this.ConditionList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
