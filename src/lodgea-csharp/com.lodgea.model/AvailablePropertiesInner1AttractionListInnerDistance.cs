/*
 * lodgea-csharp
 *
 * LODGEA SDK for csharp. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@lodgea.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lodgea-csharp.Client.OpenAPIDateConverter;

namespace lodgea-csharp.com.lodgea.model
{
    /// <summary>
    /// The distance from the property to this attraction. Whether this is road or air distance is not clearly defined as the values are entered by the tenants admins.
    /// </summary>
    [DataContract]
    public partial class AvailablePropertiesInner1AttractionListInnerDistance :  IEquatable<AvailablePropertiesInner1AttractionListInnerDistance>, IValidatableObject
    {
        /// <summary>
        /// The unit of the value of the distance.
        /// </summary>
        /// <value>The unit of the value of the distance.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UnitEnum
        {
            /// <summary>
            /// Enum M for value: m
            /// </summary>
            [EnumMember(Value = "m")]
            M = 1,

            /// <summary>
            /// Enum Ft for value: ft
            /// </summary>
            [EnumMember(Value = "ft")]
            Ft = 2

        }

        /// <summary>
        /// The unit of the value of the distance.
        /// </summary>
        /// <value>The unit of the value of the distance.</value>
        [DataMember(Name="unit", EmitDefaultValue=true)]
        public UnitEnum Unit { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AvailablePropertiesInner1AttractionListInnerDistance" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AvailablePropertiesInner1AttractionListInnerDistance() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AvailablePropertiesInner1AttractionListInnerDistance" /> class.
        /// </summary>
        /// <param name="value">The numeric value of the distance. (required).</param>
        /// <param name="unit">The unit of the value of the distance. (required).</param>
        public AvailablePropertiesInner1AttractionListInnerDistance(decimal value = default(decimal), UnitEnum unit = default(UnitEnum))
        {
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new InvalidDataException("value is a required property for AvailablePropertiesInner1AttractionListInnerDistance and cannot be null");
            }
            else
            {
                this.Value = value;
            }

            // to ensure "unit" is required (not null)
            if (unit == null)
            {
                throw new InvalidDataException("unit is a required property for AvailablePropertiesInner1AttractionListInnerDistance and cannot be null");
            }
            else
            {
                this.Unit = unit;
            }

        }

        /// <summary>
        /// The numeric value of the distance.
        /// </summary>
        /// <value>The numeric value of the distance.</value>
        [DataMember(Name="value", EmitDefaultValue=true)]
        public decimal Value { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AvailablePropertiesInner1AttractionListInnerDistance {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AvailablePropertiesInner1AttractionListInnerDistance);
        }

        /// <summary>
        /// Returns true if AvailablePropertiesInner1AttractionListInnerDistance instances are equal
        /// </summary>
        /// <param name="input">Instance of AvailablePropertiesInner1AttractionListInnerDistance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AvailablePropertiesInner1AttractionListInnerDistance input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
