/*
 * lodgea-csharp
 *
 * LODGEA SDK for csharp. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@lodgea.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lodgea-csharp.Client.OpenAPIDateConverter;

namespace lodgea-csharp.com.lodgea.model
{
    /// <summary>
    /// An object containing all available base data for the requested property.
    /// </summary>
    [DataContract]
    public partial class PropertiesPropertyIdGet200ResponseProperty :  IEquatable<PropertiesPropertyIdGet200ResponseProperty>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertiesPropertyIdGet200ResponseProperty" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PropertiesPropertyIdGet200ResponseProperty() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertiesPropertyIdGet200ResponseProperty" /> class.
        /// </summary>
        /// <param name="code">The properties unique identifier. (required).</param>
        /// <param name="name">The properties name. (required).</param>
        /// <param name="recordCreated">recordCreated (required).</param>
        /// <param name="recordModified">recordModified (required).</param>
        /// <param name="propertyInfo">propertyInfo (required).</param>
        /// <param name="guestInfo">guestInfo.</param>
        /// <param name="awardList">A list of the ratings available for this property. (required).</param>
        /// <param name="contactList">A contact with a profile type and a list of addresses (required).</param>
        /// <param name="facilityInfo">facilityInfo.</param>
        /// <param name="mediaList">A list of media objects for the property. (required).</param>
        /// <param name="geo">An object containing language codes as keys and objects describing the properties geographical location as values..</param>
        /// <param name="published">Indicates whether the policy has been published or not. (required).</param>
        /// <param name="policyList">A list of policies associated with the property. (required).</param>
        /// <param name="uri">A unique identifier for the accommodation..</param>
        /// <param name="cancellationGracePeriod">cancellationGracePeriod.</param>
        /// <param name="serviceList">A list of objects each describing an available service, its pricing and its availability. (required).</param>
        public PropertiesPropertyIdGet200ResponseProperty(string code = default(string), string name = default(string), PropertiesPropertyIdGet200ResponsePropertyRecordCreated recordCreated = default(PropertiesPropertyIdGet200ResponsePropertyRecordCreated), PropertiesPropertyIdGet200ResponsePropertyRecordModified recordModified = default(PropertiesPropertyIdGet200ResponsePropertyRecordModified), PropertiesPropertyIdGet200ResponsePropertyPropertyInfo propertyInfo = default(PropertiesPropertyIdGet200ResponsePropertyPropertyInfo), PropertiesPropertyIdGet200ResponsePropertyGuestInfo guestInfo = default(PropertiesPropertyIdGet200ResponsePropertyGuestInfo), List<PropertiesPropertyIdGet200ResponsePropertyAwardListInner> awardList = default(List<PropertiesPropertyIdGet200ResponsePropertyAwardListInner>), List<PropertiesPropertyIdGet200ResponsePropertyContactListInner> contactList = default(List<PropertiesPropertyIdGet200ResponsePropertyContactListInner>), PropertiesPropertyIdGet200ResponsePropertyFacilityInfo facilityInfo = default(PropertiesPropertyIdGet200ResponsePropertyFacilityInfo), List<PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInnerMediaListInner> mediaList = default(List<PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInnerMediaListInner>), Dictionary<string, AvailablePropertiesInner1Geo> geo = default(Dictionary<string, AvailablePropertiesInner1Geo>), bool published = default(bool), List<PropertiesPropertyIdGet200ResponsePropertyPolicyListInner> policyList = default(List<PropertiesPropertyIdGet200ResponsePropertyPolicyListInner>), string uri = default(string), PropertiesPropertyIdGet200ResponsePropertyCancellationGracePeriod cancellationGracePeriod = default(PropertiesPropertyIdGet200ResponsePropertyCancellationGracePeriod), List<PropertiesPropertyIdGet200ResponsePropertyServiceListInner> serviceList = default(List<PropertiesPropertyIdGet200ResponsePropertyServiceListInner>))
        {
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new InvalidDataException("code is a required property for PropertiesPropertyIdGet200ResponseProperty and cannot be null");
            }
            else
            {
                this.Code = code;
            }

            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for PropertiesPropertyIdGet200ResponseProperty and cannot be null");
            }
            else
            {
                this.Name = name;
            }

            // to ensure "recordCreated" is required (not null)
            if (recordCreated == null)
            {
                throw new InvalidDataException("recordCreated is a required property for PropertiesPropertyIdGet200ResponseProperty and cannot be null");
            }
            else
            {
                this.RecordCreated = recordCreated;
            }

            // to ensure "recordModified" is required (not null)
            if (recordModified == null)
            {
                throw new InvalidDataException("recordModified is a required property for PropertiesPropertyIdGet200ResponseProperty and cannot be null");
            }
            else
            {
                this.RecordModified = recordModified;
            }

            // to ensure "propertyInfo" is required (not null)
            if (propertyInfo == null)
            {
                throw new InvalidDataException("propertyInfo is a required property for PropertiesPropertyIdGet200ResponseProperty and cannot be null");
            }
            else
            {
                this.PropertyInfo = propertyInfo;
            }

            // to ensure "awardList" is required (not null)
            if (awardList == null)
            {
                throw new InvalidDataException("awardList is a required property for PropertiesPropertyIdGet200ResponseProperty and cannot be null");
            }
            else
            {
                this.AwardList = awardList;
            }

            // to ensure "contactList" is required (not null)
            if (contactList == null)
            {
                throw new InvalidDataException("contactList is a required property for PropertiesPropertyIdGet200ResponseProperty and cannot be null");
            }
            else
            {
                this.ContactList = contactList;
            }

            // to ensure "mediaList" is required (not null)
            if (mediaList == null)
            {
                throw new InvalidDataException("mediaList is a required property for PropertiesPropertyIdGet200ResponseProperty and cannot be null");
            }
            else
            {
                this.MediaList = mediaList;
            }

            // to ensure "published" is required (not null)
            if (published == null)
            {
                throw new InvalidDataException("published is a required property for PropertiesPropertyIdGet200ResponseProperty and cannot be null");
            }
            else
            {
                this.Published = published;
            }

            // to ensure "policyList" is required (not null)
            if (policyList == null)
            {
                throw new InvalidDataException("policyList is a required property for PropertiesPropertyIdGet200ResponseProperty and cannot be null");
            }
            else
            {
                this.PolicyList = policyList;
            }

            // to ensure "serviceList" is required (not null)
            if (serviceList == null)
            {
                throw new InvalidDataException("serviceList is a required property for PropertiesPropertyIdGet200ResponseProperty and cannot be null");
            }
            else
            {
                this.ServiceList = serviceList;
            }

            this.GuestInfo = guestInfo;
            this.FacilityInfo = facilityInfo;
            this.Geo = geo;
            this.Uri = uri;
            this.CancellationGracePeriod = cancellationGracePeriod;
        }

        /// <summary>
        /// The properties unique identifier.
        /// </summary>
        /// <value>The properties unique identifier.</value>
        [DataMember(Name="code", EmitDefaultValue=true)]
        public string Code { get; set; }

        /// <summary>
        /// The properties name.
        /// </summary>
        /// <value>The properties name.</value>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets RecordCreated
        /// </summary>
        [DataMember(Name="recordCreated", EmitDefaultValue=true)]
        public PropertiesPropertyIdGet200ResponsePropertyRecordCreated RecordCreated { get; set; }

        /// <summary>
        /// Gets or Sets RecordModified
        /// </summary>
        [DataMember(Name="recordModified", EmitDefaultValue=true)]
        public PropertiesPropertyIdGet200ResponsePropertyRecordModified RecordModified { get; set; }

        /// <summary>
        /// Gets or Sets PropertyInfo
        /// </summary>
        [DataMember(Name="propertyInfo", EmitDefaultValue=true)]
        public PropertiesPropertyIdGet200ResponsePropertyPropertyInfo PropertyInfo { get; set; }

        /// <summary>
        /// Gets or Sets GuestInfo
        /// </summary>
        [DataMember(Name="guestInfo", EmitDefaultValue=false)]
        public PropertiesPropertyIdGet200ResponsePropertyGuestInfo GuestInfo { get; set; }

        /// <summary>
        /// A list of the ratings available for this property.
        /// </summary>
        /// <value>A list of the ratings available for this property.</value>
        [DataMember(Name="awardList", EmitDefaultValue=true)]
        public List<PropertiesPropertyIdGet200ResponsePropertyAwardListInner> AwardList { get; set; }

        /// <summary>
        /// A contact with a profile type and a list of addresses
        /// </summary>
        /// <value>A contact with a profile type and a list of addresses</value>
        [DataMember(Name="contactList", EmitDefaultValue=true)]
        public List<PropertiesPropertyIdGet200ResponsePropertyContactListInner> ContactList { get; set; }

        /// <summary>
        /// Gets or Sets FacilityInfo
        /// </summary>
        [DataMember(Name="facilityInfo", EmitDefaultValue=false)]
        public PropertiesPropertyIdGet200ResponsePropertyFacilityInfo FacilityInfo { get; set; }

        /// <summary>
        /// A list of media objects for the property.
        /// </summary>
        /// <value>A list of media objects for the property.</value>
        [DataMember(Name="mediaList", EmitDefaultValue=true)]
        public List<PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInnerMediaListInner> MediaList { get; set; }

        /// <summary>
        /// An object containing language codes as keys and objects describing the properties geographical location as values.
        /// </summary>
        /// <value>An object containing language codes as keys and objects describing the properties geographical location as values.</value>
        [DataMember(Name="geo", EmitDefaultValue=false)]
        public Dictionary<string, AvailablePropertiesInner1Geo> Geo { get; set; }

        /// <summary>
        /// Indicates whether the policy has been published or not.
        /// </summary>
        /// <value>Indicates whether the policy has been published or not.</value>
        [DataMember(Name="published", EmitDefaultValue=true)]
        public bool Published { get; set; }

        /// <summary>
        /// A list of policies associated with the property.
        /// </summary>
        /// <value>A list of policies associated with the property.</value>
        [DataMember(Name="policyList", EmitDefaultValue=true)]
        public List<PropertiesPropertyIdGet200ResponsePropertyPolicyListInner> PolicyList { get; set; }

        /// <summary>
        /// A unique identifier for the accommodation.
        /// </summary>
        /// <value>A unique identifier for the accommodation.</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Gets or Sets CancellationGracePeriod
        /// </summary>
        [DataMember(Name="cancellationGracePeriod", EmitDefaultValue=false)]
        public PropertiesPropertyIdGet200ResponsePropertyCancellationGracePeriod CancellationGracePeriod { get; set; }

        /// <summary>
        /// A list of objects each describing an available service, its pricing and its availability.
        /// </summary>
        /// <value>A list of objects each describing an available service, its pricing and its availability.</value>
        [DataMember(Name="serviceList", EmitDefaultValue=true)]
        public List<PropertiesPropertyIdGet200ResponsePropertyServiceListInner> ServiceList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PropertiesPropertyIdGet200ResponseProperty {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RecordCreated: ").Append(RecordCreated).Append("\n");
            sb.Append("  RecordModified: ").Append(RecordModified).Append("\n");
            sb.Append("  PropertyInfo: ").Append(PropertyInfo).Append("\n");
            sb.Append("  GuestInfo: ").Append(GuestInfo).Append("\n");
            sb.Append("  AwardList: ").Append(AwardList).Append("\n");
            sb.Append("  ContactList: ").Append(ContactList).Append("\n");
            sb.Append("  FacilityInfo: ").Append(FacilityInfo).Append("\n");
            sb.Append("  MediaList: ").Append(MediaList).Append("\n");
            sb.Append("  Geo: ").Append(Geo).Append("\n");
            sb.Append("  Published: ").Append(Published).Append("\n");
            sb.Append("  PolicyList: ").Append(PolicyList).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  CancellationGracePeriod: ").Append(CancellationGracePeriod).Append("\n");
            sb.Append("  ServiceList: ").Append(ServiceList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PropertiesPropertyIdGet200ResponseProperty);
        }

        /// <summary>
        /// Returns true if PropertiesPropertyIdGet200ResponseProperty instances are equal
        /// </summary>
        /// <param name="input">Instance of PropertiesPropertyIdGet200ResponseProperty to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PropertiesPropertyIdGet200ResponseProperty input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.RecordCreated == input.RecordCreated ||
                    (this.RecordCreated != null &&
                    this.RecordCreated.Equals(input.RecordCreated))
                ) && 
                (
                    this.RecordModified == input.RecordModified ||
                    (this.RecordModified != null &&
                    this.RecordModified.Equals(input.RecordModified))
                ) && 
                (
                    this.PropertyInfo == input.PropertyInfo ||
                    (this.PropertyInfo != null &&
                    this.PropertyInfo.Equals(input.PropertyInfo))
                ) && 
                (
                    this.GuestInfo == input.GuestInfo ||
                    (this.GuestInfo != null &&
                    this.GuestInfo.Equals(input.GuestInfo))
                ) && 
                (
                    this.AwardList == input.AwardList ||
                    this.AwardList != null &&
                    input.AwardList != null &&
                    this.AwardList.SequenceEqual(input.AwardList)
                ) && 
                (
                    this.ContactList == input.ContactList ||
                    this.ContactList != null &&
                    input.ContactList != null &&
                    this.ContactList.SequenceEqual(input.ContactList)
                ) && 
                (
                    this.FacilityInfo == input.FacilityInfo ||
                    (this.FacilityInfo != null &&
                    this.FacilityInfo.Equals(input.FacilityInfo))
                ) && 
                (
                    this.MediaList == input.MediaList ||
                    this.MediaList != null &&
                    input.MediaList != null &&
                    this.MediaList.SequenceEqual(input.MediaList)
                ) && 
                (
                    this.Geo == input.Geo ||
                    this.Geo != null &&
                    input.Geo != null &&
                    this.Geo.SequenceEqual(input.Geo)
                ) && 
                (
                    this.Published == input.Published ||
                    (this.Published != null &&
                    this.Published.Equals(input.Published))
                ) && 
                (
                    this.PolicyList == input.PolicyList ||
                    this.PolicyList != null &&
                    input.PolicyList != null &&
                    this.PolicyList.SequenceEqual(input.PolicyList)
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.CancellationGracePeriod == input.CancellationGracePeriod ||
                    (this.CancellationGracePeriod != null &&
                    this.CancellationGracePeriod.Equals(input.CancellationGracePeriod))
                ) && 
                (
                    this.ServiceList == input.ServiceList ||
                    this.ServiceList != null &&
                    input.ServiceList != null &&
                    this.ServiceList.SequenceEqual(input.ServiceList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.RecordCreated != null)
                    hashCode = hashCode * 59 + this.RecordCreated.GetHashCode();
                if (this.RecordModified != null)
                    hashCode = hashCode * 59 + this.RecordModified.GetHashCode();
                if (this.PropertyInfo != null)
                    hashCode = hashCode * 59 + this.PropertyInfo.GetHashCode();
                if (this.GuestInfo != null)
                    hashCode = hashCode * 59 + this.GuestInfo.GetHashCode();
                if (this.AwardList != null)
                    hashCode = hashCode * 59 + this.AwardList.GetHashCode();
                if (this.ContactList != null)
                    hashCode = hashCode * 59 + this.ContactList.GetHashCode();
                if (this.FacilityInfo != null)
                    hashCode = hashCode * 59 + this.FacilityInfo.GetHashCode();
                if (this.MediaList != null)
                    hashCode = hashCode * 59 + this.MediaList.GetHashCode();
                if (this.Geo != null)
                    hashCode = hashCode * 59 + this.Geo.GetHashCode();
                if (this.Published != null)
                    hashCode = hashCode * 59 + this.Published.GetHashCode();
                if (this.PolicyList != null)
                    hashCode = hashCode * 59 + this.PolicyList.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.CancellationGracePeriod != null)
                    hashCode = hashCode * 59 + this.CancellationGracePeriod.GetHashCode();
                if (this.ServiceList != null)
                    hashCode = hashCode * 59 + this.ServiceList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
