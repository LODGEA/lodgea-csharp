/*
 * lodgea-csharp
 *
 * LODGEA SDK for CSharp. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@lodgea.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lodgea-csharp.Client.OpenAPIDateConverter;

namespace lodgea-csharp.com.lodgea.model
{
    /// <summary>
    /// PropertiesPropertyIdGet200ResponsePropertyAwardListInner
    /// </summary>
    [DataContract]
    public partial class PropertiesPropertyIdGet200ResponsePropertyAwardListInner :  IEquatable<PropertiesPropertyIdGet200ResponsePropertyAwardListInner>, IValidatableObject
    {
        /// <summary>
        /// The source of this rating. Currently only &lt;code&gt;star-rating&lt;/code&gt; is possible.
        /// </summary>
        /// <value>The source of this rating. Currently only &lt;code&gt;star-rating&lt;/code&gt; is possible.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProviderEnum
        {
            /// <summary>
            /// Enum StarRating for value: star-rating
            /// </summary>
            [EnumMember(Value = "star-rating")]
            StarRating = 1

        }

        /// <summary>
        /// The source of this rating. Currently only &lt;code&gt;star-rating&lt;/code&gt; is possible.
        /// </summary>
        /// <value>The source of this rating. Currently only &lt;code&gt;star-rating&lt;/code&gt; is possible.</value>
        [DataMember(Name="provider", EmitDefaultValue=true)]
        public ProviderEnum Provider { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertiesPropertyIdGet200ResponsePropertyAwardListInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PropertiesPropertyIdGet200ResponsePropertyAwardListInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertiesPropertyIdGet200ResponsePropertyAwardListInner" /> class.
        /// </summary>
        /// <param name="provider">The source of this rating. Currently only &lt;code&gt;star-rating&lt;/code&gt; is possible. (required).</param>
        /// <param name="rating">The value of this rating (required).</param>
        public PropertiesPropertyIdGet200ResponsePropertyAwardListInner(ProviderEnum provider = default(ProviderEnum), decimal rating = default(decimal))
        {
            // to ensure "provider" is required (not null)
            if (provider == null)
            {
                throw new InvalidDataException("provider is a required property for PropertiesPropertyIdGet200ResponsePropertyAwardListInner and cannot be null");
            }
            else
            {
                this.Provider = provider;
            }

            // to ensure "rating" is required (not null)
            if (rating == null)
            {
                throw new InvalidDataException("rating is a required property for PropertiesPropertyIdGet200ResponsePropertyAwardListInner and cannot be null");
            }
            else
            {
                this.Rating = rating;
            }

        }


        /// <summary>
        /// The value of this rating
        /// </summary>
        /// <value>The value of this rating</value>
        [DataMember(Name="rating", EmitDefaultValue=true)]
        public decimal Rating { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PropertiesPropertyIdGet200ResponsePropertyAwardListInner {\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PropertiesPropertyIdGet200ResponsePropertyAwardListInner);
        }

        /// <summary>
        /// Returns true if PropertiesPropertyIdGet200ResponsePropertyAwardListInner instances are equal
        /// </summary>
        /// <param name="input">Instance of PropertiesPropertyIdGet200ResponsePropertyAwardListInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PropertiesPropertyIdGet200ResponsePropertyAwardListInner input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Provider == input.Provider ||
                    (this.Provider != null &&
                    this.Provider.Equals(input.Provider))
                ) && 
                (
                    this.Rating == input.Rating ||
                    (this.Rating != null &&
                    this.Rating.Equals(input.Rating))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Provider != null)
                    hashCode = hashCode * 59 + this.Provider.GetHashCode();
                if (this.Rating != null)
                    hashCode = hashCode * 59 + this.Rating.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
