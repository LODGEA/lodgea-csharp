/*
 * lodgea-csharp
 *
 * LODGEA SDK for CSharp. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@lodgea.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lodgea-csharp.Client.OpenAPIDateConverter;

namespace lodgea-csharp.com.lodgea.model
{
    /// <summary>
    /// An object representing a room in the property.
    /// </summary>
    [DataContract]
    public partial class PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInner :  IEquatable<PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInner>, IValidatableObject
    {
        /// <summary>
        /// The unit and room type code.&lt;p&gt;See also &lt;a href&#x3D;\&quot;#unitand-room-type-codes\&quot;&gt;in the appendix&lt;/a&gt;.&lt;/p&gt;
        /// </summary>
        /// <value>The unit and room type code.&lt;p&gt;See also &lt;a href&#x3D;\&quot;#unitand-room-type-codes\&quot;&gt;in the appendix&lt;/a&gt;.&lt;/p&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RoomTypeCodeEnum
        {
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1 = 1,

            /// <summary>
            /// Enum _4 for value: 4
            /// </summary>
            [EnumMember(Value = "4")]
            _4 = 2,

            /// <summary>
            /// Enum _5 for value: 5
            /// </summary>
            [EnumMember(Value = "5")]
            _5 = 3,

            /// <summary>
            /// Enum _7 for value: 7
            /// </summary>
            [EnumMember(Value = "7")]
            _7 = 4,

            /// <summary>
            /// Enum _8 for value: 8
            /// </summary>
            [EnumMember(Value = "8")]
            _8 = 5,

            /// <summary>
            /// Enum _9 for value: 9
            /// </summary>
            [EnumMember(Value = "9")]
            _9 = 6,

            /// <summary>
            /// Enum _10 for value: 10
            /// </summary>
            [EnumMember(Value = "10")]
            _10 = 7,

            /// <summary>
            /// Enum _12 for value: 12
            /// </summary>
            [EnumMember(Value = "12")]
            _12 = 8,

            /// <summary>
            /// Enum _13 for value: 13
            /// </summary>
            [EnumMember(Value = "13")]
            _13 = 9,

            /// <summary>
            /// Enum _24 for value: 24
            /// </summary>
            [EnumMember(Value = "24")]
            _24 = 10,

            /// <summary>
            /// Enum _25 for value: 25
            /// </summary>
            [EnumMember(Value = "25")]
            _25 = 11,

            /// <summary>
            /// Enum _26 for value: 26
            /// </summary>
            [EnumMember(Value = "26")]
            _26 = 12,

            /// <summary>
            /// Enum _27 for value: 27
            /// </summary>
            [EnumMember(Value = "27")]
            _27 = 13,

            /// <summary>
            /// Enum _28 for value: 28
            /// </summary>
            [EnumMember(Value = "28")]
            _28 = 14,

            /// <summary>
            /// Enum _29 for value: 29
            /// </summary>
            [EnumMember(Value = "29")]
            _29 = 15,

            /// <summary>
            /// Enum _31 for value: 31
            /// </summary>
            [EnumMember(Value = "31")]
            _31 = 16,

            /// <summary>
            /// Enum _32 for value: 32
            /// </summary>
            [EnumMember(Value = "32")]
            _32 = 17,

            /// <summary>
            /// Enum _33 for value: 33
            /// </summary>
            [EnumMember(Value = "33")]
            _33 = 18

        }

        /// <summary>
        /// The unit and room type code.&lt;p&gt;See also &lt;a href&#x3D;\&quot;#unitand-room-type-codes\&quot;&gt;in the appendix&lt;/a&gt;.&lt;/p&gt;
        /// </summary>
        /// <value>The unit and room type code.&lt;p&gt;See also &lt;a href&#x3D;\&quot;#unitand-room-type-codes\&quot;&gt;in the appendix&lt;/a&gt;.&lt;/p&gt;</value>
        [DataMember(Name="roomTypeCode", EmitDefaultValue=true)]
        public RoomTypeCodeEnum RoomTypeCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInner" /> class.
        /// </summary>
        /// <param name="isActive">Indicates whether the room is active or not. (required).</param>
        /// <param name="roomId">The unique identifier for the room. (required).</param>
        /// <param name="name">The name of the room. (required).</param>
        /// <param name="mediaList">A list of media objects for the room. (required).</param>
        /// <param name="roomTypeCode">The unit and room type code.&lt;p&gt;See also &lt;a href&#x3D;\&quot;#unitand-room-type-codes\&quot;&gt;in the appendix&lt;/a&gt;.&lt;/p&gt; (required).</param>
        /// <param name="isNonSmoking">Indicates whether the room is designated as non-smoking. (required).</param>
        /// <param name="amenityList">A list of amenities provided in the room. (required).</param>
        /// <param name="messageList">A list of messages associated with the room. (required).</param>
        /// <param name="maxOccupancy">The maximum occupancy of the room. (required).</param>
        /// <param name="maxAdultOccupancy">The maximum number of adults that can occupy the room. (required).</param>
        /// <param name="maxChildOccupancy">The maximum number of children that can occupy the room. (required).</param>
        public PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInner(bool isActive = default(bool), string roomId = default(string), string name = default(string), List<PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInnerMediaListInner> mediaList = default(List<PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInnerMediaListInner>), RoomTypeCodeEnum roomTypeCode = default(RoomTypeCodeEnum), bool isNonSmoking = default(bool), List<PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInnerAmenityListInner> amenityList = default(List<PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInnerAmenityListInner>), List<PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInnerMessageListInner> messageList = default(List<PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInnerMessageListInner>), decimal maxOccupancy = default(decimal), decimal maxAdultOccupancy = default(decimal), decimal maxChildOccupancy = default(decimal))
        {
            // to ensure "isActive" is required (not null)
            if (isActive == null)
            {
                throw new InvalidDataException("isActive is a required property for PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInner and cannot be null");
            }
            else
            {
                this.IsActive = isActive;
            }

            // to ensure "roomId" is required (not null)
            if (roomId == null)
            {
                throw new InvalidDataException("roomId is a required property for PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInner and cannot be null");
            }
            else
            {
                this.RoomId = roomId;
            }

            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInner and cannot be null");
            }
            else
            {
                this.Name = name;
            }

            // to ensure "mediaList" is required (not null)
            if (mediaList == null)
            {
                throw new InvalidDataException("mediaList is a required property for PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInner and cannot be null");
            }
            else
            {
                this.MediaList = mediaList;
            }

            // to ensure "roomTypeCode" is required (not null)
            if (roomTypeCode == null)
            {
                throw new InvalidDataException("roomTypeCode is a required property for PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInner and cannot be null");
            }
            else
            {
                this.RoomTypeCode = roomTypeCode;
            }

            // to ensure "isNonSmoking" is required (not null)
            if (isNonSmoking == null)
            {
                throw new InvalidDataException("isNonSmoking is a required property for PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInner and cannot be null");
            }
            else
            {
                this.IsNonSmoking = isNonSmoking;
            }

            // to ensure "amenityList" is required (not null)
            if (amenityList == null)
            {
                throw new InvalidDataException("amenityList is a required property for PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInner and cannot be null");
            }
            else
            {
                this.AmenityList = amenityList;
            }

            // to ensure "messageList" is required (not null)
            if (messageList == null)
            {
                throw new InvalidDataException("messageList is a required property for PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInner and cannot be null");
            }
            else
            {
                this.MessageList = messageList;
            }

            // to ensure "maxOccupancy" is required (not null)
            if (maxOccupancy == null)
            {
                throw new InvalidDataException("maxOccupancy is a required property for PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInner and cannot be null");
            }
            else
            {
                this.MaxOccupancy = maxOccupancy;
            }

            // to ensure "maxAdultOccupancy" is required (not null)
            if (maxAdultOccupancy == null)
            {
                throw new InvalidDataException("maxAdultOccupancy is a required property for PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInner and cannot be null");
            }
            else
            {
                this.MaxAdultOccupancy = maxAdultOccupancy;
            }

            // to ensure "maxChildOccupancy" is required (not null)
            if (maxChildOccupancy == null)
            {
                throw new InvalidDataException("maxChildOccupancy is a required property for PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInner and cannot be null");
            }
            else
            {
                this.MaxChildOccupancy = maxChildOccupancy;
            }

        }

        /// <summary>
        /// Indicates whether the room is active or not.
        /// </summary>
        /// <value>Indicates whether the room is active or not.</value>
        [DataMember(Name="isActive", EmitDefaultValue=true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// The unique identifier for the room.
        /// </summary>
        /// <value>The unique identifier for the room.</value>
        [DataMember(Name="roomId", EmitDefaultValue=true)]
        public string RoomId { get; set; }

        /// <summary>
        /// The name of the room.
        /// </summary>
        /// <value>The name of the room.</value>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// A list of media objects for the room.
        /// </summary>
        /// <value>A list of media objects for the room.</value>
        [DataMember(Name="mediaList", EmitDefaultValue=true)]
        public List<PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInnerMediaListInner> MediaList { get; set; }


        /// <summary>
        /// Indicates whether the room is designated as non-smoking.
        /// </summary>
        /// <value>Indicates whether the room is designated as non-smoking.</value>
        [DataMember(Name="isNonSmoking", EmitDefaultValue=true)]
        public bool IsNonSmoking { get; set; }

        /// <summary>
        /// A list of amenities provided in the room.
        /// </summary>
        /// <value>A list of amenities provided in the room.</value>
        [DataMember(Name="amenityList", EmitDefaultValue=true)]
        public List<PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInnerAmenityListInner> AmenityList { get; set; }

        /// <summary>
        /// A list of messages associated with the room.
        /// </summary>
        /// <value>A list of messages associated with the room.</value>
        [DataMember(Name="messageList", EmitDefaultValue=true)]
        public List<PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInnerMessageListInner> MessageList { get; set; }

        /// <summary>
        /// The maximum occupancy of the room.
        /// </summary>
        /// <value>The maximum occupancy of the room.</value>
        [DataMember(Name="maxOccupancy", EmitDefaultValue=true)]
        public decimal MaxOccupancy { get; set; }

        /// <summary>
        /// The maximum number of adults that can occupy the room.
        /// </summary>
        /// <value>The maximum number of adults that can occupy the room.</value>
        [DataMember(Name="maxAdultOccupancy", EmitDefaultValue=true)]
        public decimal MaxAdultOccupancy { get; set; }

        /// <summary>
        /// The maximum number of children that can occupy the room.
        /// </summary>
        /// <value>The maximum number of children that can occupy the room.</value>
        [DataMember(Name="maxChildOccupancy", EmitDefaultValue=true)]
        public decimal MaxChildOccupancy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInner {\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  RoomId: ").Append(RoomId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  MediaList: ").Append(MediaList).Append("\n");
            sb.Append("  RoomTypeCode: ").Append(RoomTypeCode).Append("\n");
            sb.Append("  IsNonSmoking: ").Append(IsNonSmoking).Append("\n");
            sb.Append("  AmenityList: ").Append(AmenityList).Append("\n");
            sb.Append("  MessageList: ").Append(MessageList).Append("\n");
            sb.Append("  MaxOccupancy: ").Append(MaxOccupancy).Append("\n");
            sb.Append("  MaxAdultOccupancy: ").Append(MaxAdultOccupancy).Append("\n");
            sb.Append("  MaxChildOccupancy: ").Append(MaxChildOccupancy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInner);
        }

        /// <summary>
        /// Returns true if PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInner instances are equal
        /// </summary>
        /// <param name="input">Instance of PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PropertiesPropertyIdGet200ResponsePropertyFacilityInfoGuestRoomListInner input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.RoomId == input.RoomId ||
                    (this.RoomId != null &&
                    this.RoomId.Equals(input.RoomId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.MediaList == input.MediaList ||
                    this.MediaList != null &&
                    input.MediaList != null &&
                    this.MediaList.SequenceEqual(input.MediaList)
                ) && 
                (
                    this.RoomTypeCode == input.RoomTypeCode ||
                    (this.RoomTypeCode != null &&
                    this.RoomTypeCode.Equals(input.RoomTypeCode))
                ) && 
                (
                    this.IsNonSmoking == input.IsNonSmoking ||
                    (this.IsNonSmoking != null &&
                    this.IsNonSmoking.Equals(input.IsNonSmoking))
                ) && 
                (
                    this.AmenityList == input.AmenityList ||
                    this.AmenityList != null &&
                    input.AmenityList != null &&
                    this.AmenityList.SequenceEqual(input.AmenityList)
                ) && 
                (
                    this.MessageList == input.MessageList ||
                    this.MessageList != null &&
                    input.MessageList != null &&
                    this.MessageList.SequenceEqual(input.MessageList)
                ) && 
                (
                    this.MaxOccupancy == input.MaxOccupancy ||
                    (this.MaxOccupancy != null &&
                    this.MaxOccupancy.Equals(input.MaxOccupancy))
                ) && 
                (
                    this.MaxAdultOccupancy == input.MaxAdultOccupancy ||
                    (this.MaxAdultOccupancy != null &&
                    this.MaxAdultOccupancy.Equals(input.MaxAdultOccupancy))
                ) && 
                (
                    this.MaxChildOccupancy == input.MaxChildOccupancy ||
                    (this.MaxChildOccupancy != null &&
                    this.MaxChildOccupancy.Equals(input.MaxChildOccupancy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.RoomId != null)
                    hashCode = hashCode * 59 + this.RoomId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.MediaList != null)
                    hashCode = hashCode * 59 + this.MediaList.GetHashCode();
                if (this.RoomTypeCode != null)
                    hashCode = hashCode * 59 + this.RoomTypeCode.GetHashCode();
                if (this.IsNonSmoking != null)
                    hashCode = hashCode * 59 + this.IsNonSmoking.GetHashCode();
                if (this.AmenityList != null)
                    hashCode = hashCode * 59 + this.AmenityList.GetHashCode();
                if (this.MessageList != null)
                    hashCode = hashCode * 59 + this.MessageList.GetHashCode();
                if (this.MaxOccupancy != null)
                    hashCode = hashCode * 59 + this.MaxOccupancy.GetHashCode();
                if (this.MaxAdultOccupancy != null)
                    hashCode = hashCode * 59 + this.MaxAdultOccupancy.GetHashCode();
                if (this.MaxChildOccupancy != null)
                    hashCode = hashCode * 59 + this.MaxChildOccupancy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
