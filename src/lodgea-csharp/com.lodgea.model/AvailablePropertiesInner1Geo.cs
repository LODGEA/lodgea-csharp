/*
 * lodgea-csharp
 *
 * LODGEA SDK for csharp. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@lodgea.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lodgea-csharp.Client.OpenAPIDateConverter;

namespace lodgea-csharp.com.lodgea.model
{
    /// <summary>
    /// A geographical information set describing the location of this property.&lt;br&gt;&lt;br&gt;See also &lt;a href&#x3D;\&quot;#locationtypes\&quot;&gt;in the appendix&lt;/a&gt;.
    /// </summary>
    [DataContract]
    public partial class AvailablePropertiesInner1Geo :  IEquatable<AvailablePropertiesInner1Geo>, IValidatableObject
    {
        /// <summary>
        /// The language of the localizable fields ot this geographical information set.&lt;p&gt;Please note that beside the general restrictions listed below only languages configured during system setup for your respective tenant are allowed.&lt;/p&gt;&lt;p&gt;See also &lt;a href&#x3D;\&quot;#isolanguage-codes\&quot;&gt;in the appendix&lt;/a&gt;.&lt;/p&gt;
        /// </summary>
        /// <value>The language of the localizable fields ot this geographical information set.&lt;p&gt;Please note that beside the general restrictions listed below only languages configured during system setup for your respective tenant are allowed.&lt;/p&gt;&lt;p&gt;See also &lt;a href&#x3D;\&quot;#isolanguage-codes\&quot;&gt;in the appendix&lt;/a&gt;.&lt;/p&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LanguageEnum
        {
            /// <summary>
            /// Enum Af for value: af
            /// </summary>
            [EnumMember(Value = "af")]
            Af = 1,

            /// <summary>
            /// Enum Ar for value: ar
            /// </summary>
            [EnumMember(Value = "ar")]
            Ar = 2,

            /// <summary>
            /// Enum Bg for value: bg
            /// </summary>
            [EnumMember(Value = "bg")]
            Bg = 3,

            /// <summary>
            /// Enum Ca for value: ca
            /// </summary>
            [EnumMember(Value = "ca")]
            Ca = 4,

            /// <summary>
            /// Enum Cs for value: cs
            /// </summary>
            [EnumMember(Value = "cs")]
            Cs = 5,

            /// <summary>
            /// Enum Da for value: da
            /// </summary>
            [EnumMember(Value = "da")]
            Da = 6,

            /// <summary>
            /// Enum De for value: de
            /// </summary>
            [EnumMember(Value = "de")]
            De = 7,

            /// <summary>
            /// Enum El for value: el
            /// </summary>
            [EnumMember(Value = "el")]
            El = 8,

            /// <summary>
            /// Enum En for value: en
            /// </summary>
            [EnumMember(Value = "en")]
            En = 9,

            /// <summary>
            /// Enum Es for value: es
            /// </summary>
            [EnumMember(Value = "es")]
            Es = 10,

            /// <summary>
            /// Enum Et for value: et
            /// </summary>
            [EnumMember(Value = "et")]
            Et = 11,

            /// <summary>
            /// Enum Fi for value: fi
            /// </summary>
            [EnumMember(Value = "fi")]
            Fi = 12,

            /// <summary>
            /// Enum Fr for value: fr
            /// </summary>
            [EnumMember(Value = "fr")]
            Fr = 13,

            /// <summary>
            /// Enum He for value: he
            /// </summary>
            [EnumMember(Value = "he")]
            He = 14,

            /// <summary>
            /// Enum Hi for value: hi
            /// </summary>
            [EnumMember(Value = "hi")]
            Hi = 15,

            /// <summary>
            /// Enum Hr for value: hr
            /// </summary>
            [EnumMember(Value = "hr")]
            Hr = 16,

            /// <summary>
            /// Enum Hu for value: hu
            /// </summary>
            [EnumMember(Value = "hu")]
            Hu = 17,

            /// <summary>
            /// Enum Id for value: id
            /// </summary>
            [EnumMember(Value = "id")]
            Id = 18,

            /// <summary>
            /// Enum Is for value: is
            /// </summary>
            [EnumMember(Value = "is")]
            Is = 19,

            /// <summary>
            /// Enum It for value: it
            /// </summary>
            [EnumMember(Value = "it")]
            It = 20,

            /// <summary>
            /// Enum Ja for value: ja
            /// </summary>
            [EnumMember(Value = "ja")]
            Ja = 21,

            /// <summary>
            /// Enum Ko for value: ko
            /// </summary>
            [EnumMember(Value = "ko")]
            Ko = 22,

            /// <summary>
            /// Enum Lt for value: lt
            /// </summary>
            [EnumMember(Value = "lt")]
            Lt = 23,

            /// <summary>
            /// Enum Lv for value: lv
            /// </summary>
            [EnumMember(Value = "lv")]
            Lv = 24,

            /// <summary>
            /// Enum Nl for value: nl
            /// </summary>
            [EnumMember(Value = "nl")]
            Nl = 25,

            /// <summary>
            /// Enum No for value: no
            /// </summary>
            [EnumMember(Value = "no")]
            No = 26,

            /// <summary>
            /// Enum Pl for value: pl
            /// </summary>
            [EnumMember(Value = "pl")]
            Pl = 27,

            /// <summary>
            /// Enum Pt for value: pt
            /// </summary>
            [EnumMember(Value = "pt")]
            Pt = 28,

            /// <summary>
            /// Enum Ro for value: ro
            /// </summary>
            [EnumMember(Value = "ro")]
            Ro = 29,

            /// <summary>
            /// Enum Ru for value: ru
            /// </summary>
            [EnumMember(Value = "ru")]
            Ru = 30,

            /// <summary>
            /// Enum Sk for value: sk
            /// </summary>
            [EnumMember(Value = "sk")]
            Sk = 31,

            /// <summary>
            /// Enum Sl for value: sl
            /// </summary>
            [EnumMember(Value = "sl")]
            Sl = 32,

            /// <summary>
            /// Enum Sr for value: sr
            /// </summary>
            [EnumMember(Value = "sr")]
            Sr = 33,

            /// <summary>
            /// Enum Sv for value: sv
            /// </summary>
            [EnumMember(Value = "sv")]
            Sv = 34,

            /// <summary>
            /// Enum Th for value: th
            /// </summary>
            [EnumMember(Value = "th")]
            Th = 35,

            /// <summary>
            /// Enum Tr for value: tr
            /// </summary>
            [EnumMember(Value = "tr")]
            Tr = 36,

            /// <summary>
            /// Enum Vi for value: vi
            /// </summary>
            [EnumMember(Value = "vi")]
            Vi = 37,

            /// <summary>
            /// Enum Zh for value: zh
            /// </summary>
            [EnumMember(Value = "zh")]
            Zh = 38

        }

        /// <summary>
        /// The language of the localizable fields ot this geographical information set.&lt;p&gt;Please note that beside the general restrictions listed below only languages configured during system setup for your respective tenant are allowed.&lt;/p&gt;&lt;p&gt;See also &lt;a href&#x3D;\&quot;#isolanguage-codes\&quot;&gt;in the appendix&lt;/a&gt;.&lt;/p&gt;
        /// </summary>
        /// <value>The language of the localizable fields ot this geographical information set.&lt;p&gt;Please note that beside the general restrictions listed below only languages configured during system setup for your respective tenant are allowed.&lt;/p&gt;&lt;p&gt;See also &lt;a href&#x3D;\&quot;#isolanguage-codes\&quot;&gt;in the appendix&lt;/a&gt;.&lt;/p&gt;</value>
        [DataMember(Name="language", EmitDefaultValue=true)]
        public LanguageEnum Language { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AvailablePropertiesInner1Geo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AvailablePropertiesInner1Geo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AvailablePropertiesInner1Geo" /> class.
        /// </summary>
        /// <param name="language">The language of the localizable fields ot this geographical information set.&lt;p&gt;Please note that beside the general restrictions listed below only languages configured during system setup for your respective tenant are allowed.&lt;/p&gt;&lt;p&gt;See also &lt;a href&#x3D;\&quot;#isolanguage-codes\&quot;&gt;in the appendix&lt;/a&gt;.&lt;/p&gt; (required).</param>
        /// <param name="formattedAddress">The formatted address in the local format of the properties location. (required).</param>
        /// <param name="route">The name of the route or street..</param>
        /// <param name="streetNumber">The number of the street..</param>
        /// <param name="postalCode">The postal code of the location..</param>
        /// <param name="locality">A city or town..</param>
        /// <param name="sublocality">A smaller area within a locality..</param>
        /// <param name="sublocalityLevel1">A smaller area within a locality at level 1..</param>
        /// <param name="sublocalityLevel2">A smaller area within a locality at level 2..</param>
        /// <param name="sublocalityLevel3">A smaller area within a locality at level 3..</param>
        /// <param name="sublocalityLevel4">A smaller area within a locality at level 4..</param>
        /// <param name="sublocalityLevel5">A smaller area within a locality at level 5..</param>
        /// <param name="administrativeAreaLevel1">A level 1 administrative area, such as a state or province..</param>
        /// <param name="administrativeAreaLevel2">A level 2 administrative area..</param>
        /// <param name="administrativeAreaLevel3">A level 3 administrative area.</param>
        /// <param name="administrativeAreaLevel4">A level 4 administrative area..</param>
        /// <param name="administrativeAreaLevel5">A level 5 administrative area.</param>
        /// <param name="stateCode">The state or province code for the administrative area..</param>
        /// <param name="country">The country of this geographical information set..</param>
        /// <param name="countryCode">The country code for the country..</param>
        /// <param name="location">location (required).</param>
        /// <param name="placeId">Uniquely identifies a place in our database. (required).</param>
        public AvailablePropertiesInner1Geo(LanguageEnum language = default(LanguageEnum), string formattedAddress = default(string), string route = default(string), string streetNumber = default(string), string postalCode = default(string), string locality = default(string), string sublocality = default(string), string sublocalityLevel1 = default(string), string sublocalityLevel2 = default(string), string sublocalityLevel3 = default(string), string sublocalityLevel4 = default(string), string sublocalityLevel5 = default(string), string administrativeAreaLevel1 = default(string), string administrativeAreaLevel2 = default(string), string administrativeAreaLevel3 = default(string), string administrativeAreaLevel4 = default(string), string administrativeAreaLevel5 = default(string), string stateCode = default(string), string country = default(string), string countryCode = default(string), AvailablePropertiesInner1GeoLocation location = default(AvailablePropertiesInner1GeoLocation), string placeId = default(string))
        {
            // to ensure "language" is required (not null)
            if (language == null)
            {
                throw new InvalidDataException("language is a required property for AvailablePropertiesInner1Geo and cannot be null");
            }
            else
            {
                this.Language = language;
            }

            // to ensure "formattedAddress" is required (not null)
            if (formattedAddress == null)
            {
                throw new InvalidDataException("formattedAddress is a required property for AvailablePropertiesInner1Geo and cannot be null");
            }
            else
            {
                this.FormattedAddress = formattedAddress;
            }

            // to ensure "location" is required (not null)
            if (location == null)
            {
                throw new InvalidDataException("location is a required property for AvailablePropertiesInner1Geo and cannot be null");
            }
            else
            {
                this.Location = location;
            }

            // to ensure "placeId" is required (not null)
            if (placeId == null)
            {
                throw new InvalidDataException("placeId is a required property for AvailablePropertiesInner1Geo and cannot be null");
            }
            else
            {
                this.PlaceId = placeId;
            }

            this.Route = route;
            this.StreetNumber = streetNumber;
            this.PostalCode = postalCode;
            this.Locality = locality;
            this.Sublocality = sublocality;
            this.SublocalityLevel1 = sublocalityLevel1;
            this.SublocalityLevel2 = sublocalityLevel2;
            this.SublocalityLevel3 = sublocalityLevel3;
            this.SublocalityLevel4 = sublocalityLevel4;
            this.SublocalityLevel5 = sublocalityLevel5;
            this.AdministrativeAreaLevel1 = administrativeAreaLevel1;
            this.AdministrativeAreaLevel2 = administrativeAreaLevel2;
            this.AdministrativeAreaLevel3 = administrativeAreaLevel3;
            this.AdministrativeAreaLevel4 = administrativeAreaLevel4;
            this.AdministrativeAreaLevel5 = administrativeAreaLevel5;
            this.StateCode = stateCode;
            this.Country = country;
            this.CountryCode = countryCode;
        }


        /// <summary>
        /// The formatted address in the local format of the properties location.
        /// </summary>
        /// <value>The formatted address in the local format of the properties location.</value>
        [DataMember(Name="formatted_address", EmitDefaultValue=true)]
        public string FormattedAddress { get; set; }

        /// <summary>
        /// The name of the route or street.
        /// </summary>
        /// <value>The name of the route or street.</value>
        [DataMember(Name="route", EmitDefaultValue=false)]
        public string Route { get; set; }

        /// <summary>
        /// The number of the street.
        /// </summary>
        /// <value>The number of the street.</value>
        [DataMember(Name="street_number", EmitDefaultValue=false)]
        public string StreetNumber { get; set; }

        /// <summary>
        /// The postal code of the location.
        /// </summary>
        /// <value>The postal code of the location.</value>
        [DataMember(Name="postal_code", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// A city or town.
        /// </summary>
        /// <value>A city or town.</value>
        [DataMember(Name="locality", EmitDefaultValue=false)]
        public string Locality { get; set; }

        /// <summary>
        /// A smaller area within a locality.
        /// </summary>
        /// <value>A smaller area within a locality.</value>
        [DataMember(Name="sublocality", EmitDefaultValue=false)]
        public string Sublocality { get; set; }

        /// <summary>
        /// A smaller area within a locality at level 1.
        /// </summary>
        /// <value>A smaller area within a locality at level 1.</value>
        [DataMember(Name="sublocality_level_1", EmitDefaultValue=false)]
        public string SublocalityLevel1 { get; set; }

        /// <summary>
        /// A smaller area within a locality at level 2.
        /// </summary>
        /// <value>A smaller area within a locality at level 2.</value>
        [DataMember(Name="sublocality_level_2", EmitDefaultValue=false)]
        public string SublocalityLevel2 { get; set; }

        /// <summary>
        /// A smaller area within a locality at level 3.
        /// </summary>
        /// <value>A smaller area within a locality at level 3.</value>
        [DataMember(Name="sublocality_level_3", EmitDefaultValue=false)]
        public string SublocalityLevel3 { get; set; }

        /// <summary>
        /// A smaller area within a locality at level 4.
        /// </summary>
        /// <value>A smaller area within a locality at level 4.</value>
        [DataMember(Name="sublocality_level_4", EmitDefaultValue=false)]
        public string SublocalityLevel4 { get; set; }

        /// <summary>
        /// A smaller area within a locality at level 5.
        /// </summary>
        /// <value>A smaller area within a locality at level 5.</value>
        [DataMember(Name="sublocality_level_5", EmitDefaultValue=false)]
        public string SublocalityLevel5 { get; set; }

        /// <summary>
        /// A level 1 administrative area, such as a state or province.
        /// </summary>
        /// <value>A level 1 administrative area, such as a state or province.</value>
        [DataMember(Name="administrative_area_level_1", EmitDefaultValue=false)]
        public string AdministrativeAreaLevel1 { get; set; }

        /// <summary>
        /// A level 2 administrative area.
        /// </summary>
        /// <value>A level 2 administrative area.</value>
        [DataMember(Name="administrative_area_level_2", EmitDefaultValue=false)]
        public string AdministrativeAreaLevel2 { get; set; }

        /// <summary>
        /// A level 3 administrative area
        /// </summary>
        /// <value>A level 3 administrative area</value>
        [DataMember(Name="administrative_area_level_3", EmitDefaultValue=false)]
        public string AdministrativeAreaLevel3 { get; set; }

        /// <summary>
        /// A level 4 administrative area.
        /// </summary>
        /// <value>A level 4 administrative area.</value>
        [DataMember(Name="administrative_area_level_4", EmitDefaultValue=false)]
        public string AdministrativeAreaLevel4 { get; set; }

        /// <summary>
        /// A level 5 administrative area
        /// </summary>
        /// <value>A level 5 administrative area</value>
        [DataMember(Name="administrative_area_level_5", EmitDefaultValue=false)]
        public string AdministrativeAreaLevel5 { get; set; }

        /// <summary>
        /// The state or province code for the administrative area.
        /// </summary>
        /// <value>The state or province code for the administrative area.</value>
        [DataMember(Name="state_code", EmitDefaultValue=false)]
        public string StateCode { get; set; }

        /// <summary>
        /// The country of this geographical information set.
        /// </summary>
        /// <value>The country of this geographical information set.</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// The country code for the country.
        /// </summary>
        /// <value>The country code for the country.</value>
        [DataMember(Name="country_code", EmitDefaultValue=false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=true)]
        public AvailablePropertiesInner1GeoLocation Location { get; set; }

        /// <summary>
        /// Uniquely identifies a place in our database.
        /// </summary>
        /// <value>Uniquely identifies a place in our database.</value>
        [DataMember(Name="place_id", EmitDefaultValue=true)]
        public string PlaceId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AvailablePropertiesInner1Geo {\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  FormattedAddress: ").Append(FormattedAddress).Append("\n");
            sb.Append("  Route: ").Append(Route).Append("\n");
            sb.Append("  StreetNumber: ").Append(StreetNumber).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Locality: ").Append(Locality).Append("\n");
            sb.Append("  Sublocality: ").Append(Sublocality).Append("\n");
            sb.Append("  SublocalityLevel1: ").Append(SublocalityLevel1).Append("\n");
            sb.Append("  SublocalityLevel2: ").Append(SublocalityLevel2).Append("\n");
            sb.Append("  SublocalityLevel3: ").Append(SublocalityLevel3).Append("\n");
            sb.Append("  SublocalityLevel4: ").Append(SublocalityLevel4).Append("\n");
            sb.Append("  SublocalityLevel5: ").Append(SublocalityLevel5).Append("\n");
            sb.Append("  AdministrativeAreaLevel1: ").Append(AdministrativeAreaLevel1).Append("\n");
            sb.Append("  AdministrativeAreaLevel2: ").Append(AdministrativeAreaLevel2).Append("\n");
            sb.Append("  AdministrativeAreaLevel3: ").Append(AdministrativeAreaLevel3).Append("\n");
            sb.Append("  AdministrativeAreaLevel4: ").Append(AdministrativeAreaLevel4).Append("\n");
            sb.Append("  AdministrativeAreaLevel5: ").Append(AdministrativeAreaLevel5).Append("\n");
            sb.Append("  StateCode: ").Append(StateCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  PlaceId: ").Append(PlaceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AvailablePropertiesInner1Geo);
        }

        /// <summary>
        /// Returns true if AvailablePropertiesInner1Geo instances are equal
        /// </summary>
        /// <param name="input">Instance of AvailablePropertiesInner1Geo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AvailablePropertiesInner1Geo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.FormattedAddress == input.FormattedAddress ||
                    (this.FormattedAddress != null &&
                    this.FormattedAddress.Equals(input.FormattedAddress))
                ) && 
                (
                    this.Route == input.Route ||
                    (this.Route != null &&
                    this.Route.Equals(input.Route))
                ) && 
                (
                    this.StreetNumber == input.StreetNumber ||
                    (this.StreetNumber != null &&
                    this.StreetNumber.Equals(input.StreetNumber))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.Locality == input.Locality ||
                    (this.Locality != null &&
                    this.Locality.Equals(input.Locality))
                ) && 
                (
                    this.Sublocality == input.Sublocality ||
                    (this.Sublocality != null &&
                    this.Sublocality.Equals(input.Sublocality))
                ) && 
                (
                    this.SublocalityLevel1 == input.SublocalityLevel1 ||
                    (this.SublocalityLevel1 != null &&
                    this.SublocalityLevel1.Equals(input.SublocalityLevel1))
                ) && 
                (
                    this.SublocalityLevel2 == input.SublocalityLevel2 ||
                    (this.SublocalityLevel2 != null &&
                    this.SublocalityLevel2.Equals(input.SublocalityLevel2))
                ) && 
                (
                    this.SublocalityLevel3 == input.SublocalityLevel3 ||
                    (this.SublocalityLevel3 != null &&
                    this.SublocalityLevel3.Equals(input.SublocalityLevel3))
                ) && 
                (
                    this.SublocalityLevel4 == input.SublocalityLevel4 ||
                    (this.SublocalityLevel4 != null &&
                    this.SublocalityLevel4.Equals(input.SublocalityLevel4))
                ) && 
                (
                    this.SublocalityLevel5 == input.SublocalityLevel5 ||
                    (this.SublocalityLevel5 != null &&
                    this.SublocalityLevel5.Equals(input.SublocalityLevel5))
                ) && 
                (
                    this.AdministrativeAreaLevel1 == input.AdministrativeAreaLevel1 ||
                    (this.AdministrativeAreaLevel1 != null &&
                    this.AdministrativeAreaLevel1.Equals(input.AdministrativeAreaLevel1))
                ) && 
                (
                    this.AdministrativeAreaLevel2 == input.AdministrativeAreaLevel2 ||
                    (this.AdministrativeAreaLevel2 != null &&
                    this.AdministrativeAreaLevel2.Equals(input.AdministrativeAreaLevel2))
                ) && 
                (
                    this.AdministrativeAreaLevel3 == input.AdministrativeAreaLevel3 ||
                    (this.AdministrativeAreaLevel3 != null &&
                    this.AdministrativeAreaLevel3.Equals(input.AdministrativeAreaLevel3))
                ) && 
                (
                    this.AdministrativeAreaLevel4 == input.AdministrativeAreaLevel4 ||
                    (this.AdministrativeAreaLevel4 != null &&
                    this.AdministrativeAreaLevel4.Equals(input.AdministrativeAreaLevel4))
                ) && 
                (
                    this.AdministrativeAreaLevel5 == input.AdministrativeAreaLevel5 ||
                    (this.AdministrativeAreaLevel5 != null &&
                    this.AdministrativeAreaLevel5.Equals(input.AdministrativeAreaLevel5))
                ) && 
                (
                    this.StateCode == input.StateCode ||
                    (this.StateCode != null &&
                    this.StateCode.Equals(input.StateCode))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.PlaceId == input.PlaceId ||
                    (this.PlaceId != null &&
                    this.PlaceId.Equals(input.PlaceId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.FormattedAddress != null)
                    hashCode = hashCode * 59 + this.FormattedAddress.GetHashCode();
                if (this.Route != null)
                    hashCode = hashCode * 59 + this.Route.GetHashCode();
                if (this.StreetNumber != null)
                    hashCode = hashCode * 59 + this.StreetNumber.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.Locality != null)
                    hashCode = hashCode * 59 + this.Locality.GetHashCode();
                if (this.Sublocality != null)
                    hashCode = hashCode * 59 + this.Sublocality.GetHashCode();
                if (this.SublocalityLevel1 != null)
                    hashCode = hashCode * 59 + this.SublocalityLevel1.GetHashCode();
                if (this.SublocalityLevel2 != null)
                    hashCode = hashCode * 59 + this.SublocalityLevel2.GetHashCode();
                if (this.SublocalityLevel3 != null)
                    hashCode = hashCode * 59 + this.SublocalityLevel3.GetHashCode();
                if (this.SublocalityLevel4 != null)
                    hashCode = hashCode * 59 + this.SublocalityLevel4.GetHashCode();
                if (this.SublocalityLevel5 != null)
                    hashCode = hashCode * 59 + this.SublocalityLevel5.GetHashCode();
                if (this.AdministrativeAreaLevel1 != null)
                    hashCode = hashCode * 59 + this.AdministrativeAreaLevel1.GetHashCode();
                if (this.AdministrativeAreaLevel2 != null)
                    hashCode = hashCode * 59 + this.AdministrativeAreaLevel2.GetHashCode();
                if (this.AdministrativeAreaLevel3 != null)
                    hashCode = hashCode * 59 + this.AdministrativeAreaLevel3.GetHashCode();
                if (this.AdministrativeAreaLevel4 != null)
                    hashCode = hashCode * 59 + this.AdministrativeAreaLevel4.GetHashCode();
                if (this.AdministrativeAreaLevel5 != null)
                    hashCode = hashCode * 59 + this.AdministrativeAreaLevel5.GetHashCode();
                if (this.StateCode != null)
                    hashCode = hashCode * 59 + this.StateCode.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.PlaceId != null)
                    hashCode = hashCode * 59 + this.PlaceId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
