/*
 * lodgea-csharp
 *
 * LODGEA SDK for CSharp. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: support@lodgea.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lodgea-csharp.Client.OpenAPIDateConverter;

namespace lodgea-csharp.com.lodgea.model
{
    /// <summary>
    /// V1PropertyGetPost200ResponsePropertyGuestInfo
    /// </summary>
    [DataContract]
    public partial class V1PropertyGetPost200ResponsePropertyGuestInfo :  IEquatable<V1PropertyGetPost200ResponsePropertyGuestInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1PropertyGetPost200ResponsePropertyGuestInfo" /> class.
        /// </summary>
        /// <param name="guestAddressRequired">guestAddressRequired.</param>
        /// <param name="guestContactNumberRequired">guestContactNumberRequired.</param>
        /// <param name="guestNameListRequired">guestNameListRequired.</param>
        public V1PropertyGetPost200ResponsePropertyGuestInfo(bool guestAddressRequired = default(bool), bool guestContactNumberRequired = default(bool), bool guestNameListRequired = default(bool))
        {
            this.GuestAddressRequired = guestAddressRequired;
            this.GuestContactNumberRequired = guestContactNumberRequired;
            this.GuestNameListRequired = guestNameListRequired;
        }

        /// <summary>
        /// Gets or Sets GuestAddressRequired
        /// </summary>
        [DataMember(Name="guestAddressRequired", EmitDefaultValue=false)]
        public bool GuestAddressRequired { get; set; }

        /// <summary>
        /// Gets or Sets GuestContactNumberRequired
        /// </summary>
        [DataMember(Name="guestContactNumberRequired", EmitDefaultValue=false)]
        public bool GuestContactNumberRequired { get; set; }

        /// <summary>
        /// Gets or Sets GuestNameListRequired
        /// </summary>
        [DataMember(Name="guestNameListRequired", EmitDefaultValue=false)]
        public bool GuestNameListRequired { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1PropertyGetPost200ResponsePropertyGuestInfo {\n");
            sb.Append("  GuestAddressRequired: ").Append(GuestAddressRequired).Append("\n");
            sb.Append("  GuestContactNumberRequired: ").Append(GuestContactNumberRequired).Append("\n");
            sb.Append("  GuestNameListRequired: ").Append(GuestNameListRequired).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as V1PropertyGetPost200ResponsePropertyGuestInfo);
        }

        /// <summary>
        /// Returns true if V1PropertyGetPost200ResponsePropertyGuestInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of V1PropertyGetPost200ResponsePropertyGuestInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1PropertyGetPost200ResponsePropertyGuestInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GuestAddressRequired == input.GuestAddressRequired ||
                    (this.GuestAddressRequired != null &&
                    this.GuestAddressRequired.Equals(input.GuestAddressRequired))
                ) && 
                (
                    this.GuestContactNumberRequired == input.GuestContactNumberRequired ||
                    (this.GuestContactNumberRequired != null &&
                    this.GuestContactNumberRequired.Equals(input.GuestContactNumberRequired))
                ) && 
                (
                    this.GuestNameListRequired == input.GuestNameListRequired ||
                    (this.GuestNameListRequired != null &&
                    this.GuestNameListRequired.Equals(input.GuestNameListRequired))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GuestAddressRequired != null)
                    hashCode = hashCode * 59 + this.GuestAddressRequired.GetHashCode();
                if (this.GuestContactNumberRequired != null)
                    hashCode = hashCode * 59 + this.GuestContactNumberRequired.GetHashCode();
                if (this.GuestNameListRequired != null)
                    hashCode = hashCode * 59 + this.GuestNameListRequired.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
