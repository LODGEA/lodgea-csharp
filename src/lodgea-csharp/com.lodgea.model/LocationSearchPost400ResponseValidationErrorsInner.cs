/*
 * lodgea-csharp
 *
 * LODGEA SDK for CSharp. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@lodgea.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lodgea-csharp.Client.OpenAPIDateConverter;

namespace lodgea-csharp.com.lodgea.model
{
    /// <summary>
    /// A Zod issue. More fields can be present depending on the issue type.
    /// </summary>
    [DataContract]
    public partial class LocationSearchPost400ResponseValidationErrorsInner :  IEquatable<LocationSearchPost400ResponseValidationErrorsInner>, IValidatableObject
    {
        /// <summary>
        /// The ZodIssueCode describing the issue.
        /// </summary>
        /// <value>The ZodIssueCode describing the issue.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CodeEnum
        {
            /// <summary>
            /// Enum Invalidtype for value: invalid_type
            /// </summary>
            [EnumMember(Value = "invalid_type")]
            Invalidtype = 1,

            /// <summary>
            /// Enum Invalidliteral for value: invalid_literal
            /// </summary>
            [EnumMember(Value = "invalid_literal")]
            Invalidliteral = 2,

            /// <summary>
            /// Enum Custom for value: custom
            /// </summary>
            [EnumMember(Value = "custom")]
            Custom = 3,

            /// <summary>
            /// Enum Invalidunion for value: invalid_union
            /// </summary>
            [EnumMember(Value = "invalid_union")]
            Invalidunion = 4,

            /// <summary>
            /// Enum Invaliduniondiscriminator for value: invalid_union_discriminator
            /// </summary>
            [EnumMember(Value = "invalid_union_discriminator")]
            Invaliduniondiscriminator = 5,

            /// <summary>
            /// Enum Invalidenumvalue for value: invalid_enum_value
            /// </summary>
            [EnumMember(Value = "invalid_enum_value")]
            Invalidenumvalue = 6,

            /// <summary>
            /// Enum Unrecognizedkeys for value: unrecognized_keys
            /// </summary>
            [EnumMember(Value = "unrecognized_keys")]
            Unrecognizedkeys = 7,

            /// <summary>
            /// Enum Invalidarguments for value: invalid_arguments
            /// </summary>
            [EnumMember(Value = "invalid_arguments")]
            Invalidarguments = 8,

            /// <summary>
            /// Enum Invalidreturntype for value: invalid_return_type
            /// </summary>
            [EnumMember(Value = "invalid_return_type")]
            Invalidreturntype = 9,

            /// <summary>
            /// Enum Invaliddate for value: invalid_date
            /// </summary>
            [EnumMember(Value = "invalid_date")]
            Invaliddate = 10,

            /// <summary>
            /// Enum Invalidstring for value: invalid_string
            /// </summary>
            [EnumMember(Value = "invalid_string")]
            Invalidstring = 11,

            /// <summary>
            /// Enum Toosmall for value: too_small
            /// </summary>
            [EnumMember(Value = "too_small")]
            Toosmall = 12,

            /// <summary>
            /// Enum Toobig for value: too_big
            /// </summary>
            [EnumMember(Value = "too_big")]
            Toobig = 13,

            /// <summary>
            /// Enum Invalidintersectiontypes for value: invalid_intersection_types
            /// </summary>
            [EnumMember(Value = "invalid_intersection_types")]
            Invalidintersectiontypes = 14,

            /// <summary>
            /// Enum Notmultipleof for value: not_multiple_of
            /// </summary>
            [EnumMember(Value = "not_multiple_of")]
            Notmultipleof = 15,

            /// <summary>
            /// Enum Notfinite for value: not_finite
            /// </summary>
            [EnumMember(Value = "not_finite")]
            Notfinite = 16

        }

        /// <summary>
        /// The ZodIssueCode describing the issue.
        /// </summary>
        /// <value>The ZodIssueCode describing the issue.</value>
        [DataMember(Name="code", EmitDefaultValue=true)]
        public CodeEnum Code { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LocationSearchPost400ResponseValidationErrorsInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LocationSearchPost400ResponseValidationErrorsInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LocationSearchPost400ResponseValidationErrorsInner" /> class.
        /// </summary>
        /// <param name="code">The ZodIssueCode describing the issue. (required).</param>
        /// <param name="message">A message describing the error in a human readable way. (required).</param>
        /// <param name="path">An array describing the position of the faulty property. The first segment will always be either \&quot;body\&quot;, \&quot;pathParameters\&quot; or \&quot;queryParameters\&quot; indicating on which part of your request the error occurred. (required).</param>
        public LocationSearchPost400ResponseValidationErrorsInner(CodeEnum code = default(CodeEnum), string message = default(string), List<string> path = default(List<string>))
        {
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new InvalidDataException("code is a required property for LocationSearchPost400ResponseValidationErrorsInner and cannot be null");
            }
            else
            {
                this.Code = code;
            }

            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new InvalidDataException("message is a required property for LocationSearchPost400ResponseValidationErrorsInner and cannot be null");
            }
            else
            {
                this.Message = message;
            }

            // to ensure "path" is required (not null)
            if (path == null)
            {
                throw new InvalidDataException("path is a required property for LocationSearchPost400ResponseValidationErrorsInner and cannot be null");
            }
            else
            {
                this.Path = path;
            }

        }


        /// <summary>
        /// A message describing the error in a human readable way.
        /// </summary>
        /// <value>A message describing the error in a human readable way.</value>
        [DataMember(Name="message", EmitDefaultValue=true)]
        public string Message { get; set; }

        /// <summary>
        /// An array describing the position of the faulty property. The first segment will always be either \&quot;body\&quot;, \&quot;pathParameters\&quot; or \&quot;queryParameters\&quot; indicating on which part of your request the error occurred.
        /// </summary>
        /// <value>An array describing the position of the faulty property. The first segment will always be either \&quot;body\&quot;, \&quot;pathParameters\&quot; or \&quot;queryParameters\&quot; indicating on which part of your request the error occurred.</value>
        [DataMember(Name="path", EmitDefaultValue=true)]
        public List<string> Path { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LocationSearchPost400ResponseValidationErrorsInner {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LocationSearchPost400ResponseValidationErrorsInner);
        }

        /// <summary>
        /// Returns true if LocationSearchPost400ResponseValidationErrorsInner instances are equal
        /// </summary>
        /// <param name="input">Instance of LocationSearchPost400ResponseValidationErrorsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LocationSearchPost400ResponseValidationErrorsInner input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Path == input.Path ||
                    this.Path != null &&
                    input.Path != null &&
                    this.Path.SequenceEqual(input.Path)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
