/*
 * lodgea-csharp
 *
 * LODGEA SDK for CSharp. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: support@lodgea.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lodgea-csharp.Client.OpenAPIDateConverter;

namespace lodgea-csharp.com.lodgea.model
{
    /// <summary>
    /// AvailabilitySearch
    /// </summary>
    [DataContract]
    public partial class AvailabilitySearch :  IEquatable<AvailabilitySearch>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AvailabilitySearch" /> class.
        /// </summary>
        /// <param name="adultCount">adultCount.</param>
        /// <param name="childCount">childCount.</param>
        /// <param name="childAgeList">childAgeList.</param>
        /// <param name="currencyCode">currencyCode.</param>
        /// <param name="minLengthOfStay">minLengthOfStay.</param>
        /// <param name="maxLengthOfStay">maxLengthOfStay.</param>
        /// <param name="locationName">locationName.</param>
        /// <param name="locationType">locationType.</param>
        /// <param name="earliestArrival">earliestArrival.</param>
        /// <param name="latestReturn">latestReturn.</param>
        /// <param name="sort">sort.</param>
        /// <param name="serviceList">serviceList.</param>
        /// <param name="typeList">typeList.</param>
        /// <param name="unitTypeList">unitTypeList.</param>
        /// <param name="unitAmenityList">unitAmenityList.</param>
        /// <param name="mealPlanList">mealPlanList.</param>
        public AvailabilitySearch(decimal adultCount = default(decimal), decimal childCount = default(decimal), List<decimal> childAgeList = default(List<decimal>), string currencyCode = default(string), decimal minLengthOfStay = default(decimal), decimal maxLengthOfStay = default(decimal), string locationName = default(string), string locationType = default(string), DateTime earliestArrival = default(DateTime), DateTime latestReturn = default(DateTime), string sort = default(string), List<decimal> serviceList = default(List<decimal>), List<decimal> typeList = default(List<decimal>), List<decimal> unitTypeList = default(List<decimal>), List<decimal> unitAmenityList = default(List<decimal>), List<decimal> mealPlanList = default(List<decimal>))
        {
            this.AdultCount = adultCount;
            this.ChildCount = childCount;
            this.ChildAgeList = childAgeList;
            this.CurrencyCode = currencyCode;
            this.MinLengthOfStay = minLengthOfStay;
            this.MaxLengthOfStay = maxLengthOfStay;
            this.LocationName = locationName;
            this.LocationType = locationType;
            this.EarliestArrival = earliestArrival;
            this.LatestReturn = latestReturn;
            this.Sort = sort;
            this.ServiceList = serviceList;
            this.TypeList = typeList;
            this.UnitTypeList = unitTypeList;
            this.UnitAmenityList = unitAmenityList;
            this.MealPlanList = mealPlanList;
        }

        /// <summary>
        /// Gets or Sets AdultCount
        /// </summary>
        [DataMember(Name="adultCount", EmitDefaultValue=false)]
        public decimal AdultCount { get; set; }

        /// <summary>
        /// Gets or Sets ChildCount
        /// </summary>
        [DataMember(Name="childCount", EmitDefaultValue=false)]
        public decimal ChildCount { get; set; }

        /// <summary>
        /// Gets or Sets ChildAgeList
        /// </summary>
        [DataMember(Name="childAgeList", EmitDefaultValue=false)]
        public List<decimal> ChildAgeList { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets MinLengthOfStay
        /// </summary>
        [DataMember(Name="minLengthOfStay", EmitDefaultValue=false)]
        public decimal MinLengthOfStay { get; set; }

        /// <summary>
        /// Gets or Sets MaxLengthOfStay
        /// </summary>
        [DataMember(Name="maxLengthOfStay", EmitDefaultValue=false)]
        public decimal MaxLengthOfStay { get; set; }

        /// <summary>
        /// Gets or Sets LocationName
        /// </summary>
        [DataMember(Name="locationName", EmitDefaultValue=false)]
        public string LocationName { get; set; }

        /// <summary>
        /// Gets or Sets LocationType
        /// </summary>
        [DataMember(Name="locationType", EmitDefaultValue=false)]
        public string LocationType { get; set; }

        /// <summary>
        /// Gets or Sets EarliestArrival
        /// </summary>
        [DataMember(Name="earliestArrival", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime EarliestArrival { get; set; }

        /// <summary>
        /// Gets or Sets LatestReturn
        /// </summary>
        [DataMember(Name="latestReturn", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime LatestReturn { get; set; }

        /// <summary>
        /// Gets or Sets Sort
        /// </summary>
        [DataMember(Name="sort", EmitDefaultValue=false)]
        public string Sort { get; set; }

        /// <summary>
        /// Gets or Sets ServiceList
        /// </summary>
        [DataMember(Name="serviceList", EmitDefaultValue=false)]
        public List<decimal> ServiceList { get; set; }

        /// <summary>
        /// Gets or Sets TypeList
        /// </summary>
        [DataMember(Name="typeList", EmitDefaultValue=false)]
        public List<decimal> TypeList { get; set; }

        /// <summary>
        /// Gets or Sets UnitTypeList
        /// </summary>
        [DataMember(Name="unitTypeList", EmitDefaultValue=false)]
        public List<decimal> UnitTypeList { get; set; }

        /// <summary>
        /// Gets or Sets UnitAmenityList
        /// </summary>
        [DataMember(Name="unitAmenityList", EmitDefaultValue=false)]
        public List<decimal> UnitAmenityList { get; set; }

        /// <summary>
        /// Gets or Sets MealPlanList
        /// </summary>
        [DataMember(Name="mealPlanList", EmitDefaultValue=false)]
        public List<decimal> MealPlanList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AvailabilitySearch {\n");
            sb.Append("  AdultCount: ").Append(AdultCount).Append("\n");
            sb.Append("  ChildCount: ").Append(ChildCount).Append("\n");
            sb.Append("  ChildAgeList: ").Append(ChildAgeList).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  MinLengthOfStay: ").Append(MinLengthOfStay).Append("\n");
            sb.Append("  MaxLengthOfStay: ").Append(MaxLengthOfStay).Append("\n");
            sb.Append("  LocationName: ").Append(LocationName).Append("\n");
            sb.Append("  LocationType: ").Append(LocationType).Append("\n");
            sb.Append("  EarliestArrival: ").Append(EarliestArrival).Append("\n");
            sb.Append("  LatestReturn: ").Append(LatestReturn).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  ServiceList: ").Append(ServiceList).Append("\n");
            sb.Append("  TypeList: ").Append(TypeList).Append("\n");
            sb.Append("  UnitTypeList: ").Append(UnitTypeList).Append("\n");
            sb.Append("  UnitAmenityList: ").Append(UnitAmenityList).Append("\n");
            sb.Append("  MealPlanList: ").Append(MealPlanList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AvailabilitySearch);
        }

        /// <summary>
        /// Returns true if AvailabilitySearch instances are equal
        /// </summary>
        /// <param name="input">Instance of AvailabilitySearch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AvailabilitySearch input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdultCount == input.AdultCount ||
                    (this.AdultCount != null &&
                    this.AdultCount.Equals(input.AdultCount))
                ) && 
                (
                    this.ChildCount == input.ChildCount ||
                    (this.ChildCount != null &&
                    this.ChildCount.Equals(input.ChildCount))
                ) && 
                (
                    this.ChildAgeList == input.ChildAgeList ||
                    this.ChildAgeList != null &&
                    input.ChildAgeList != null &&
                    this.ChildAgeList.SequenceEqual(input.ChildAgeList)
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.MinLengthOfStay == input.MinLengthOfStay ||
                    (this.MinLengthOfStay != null &&
                    this.MinLengthOfStay.Equals(input.MinLengthOfStay))
                ) && 
                (
                    this.MaxLengthOfStay == input.MaxLengthOfStay ||
                    (this.MaxLengthOfStay != null &&
                    this.MaxLengthOfStay.Equals(input.MaxLengthOfStay))
                ) && 
                (
                    this.LocationName == input.LocationName ||
                    (this.LocationName != null &&
                    this.LocationName.Equals(input.LocationName))
                ) && 
                (
                    this.LocationType == input.LocationType ||
                    (this.LocationType != null &&
                    this.LocationType.Equals(input.LocationType))
                ) && 
                (
                    this.EarliestArrival == input.EarliestArrival ||
                    (this.EarliestArrival != null &&
                    this.EarliestArrival.Equals(input.EarliestArrival))
                ) && 
                (
                    this.LatestReturn == input.LatestReturn ||
                    (this.LatestReturn != null &&
                    this.LatestReturn.Equals(input.LatestReturn))
                ) && 
                (
                    this.Sort == input.Sort ||
                    (this.Sort != null &&
                    this.Sort.Equals(input.Sort))
                ) && 
                (
                    this.ServiceList == input.ServiceList ||
                    this.ServiceList != null &&
                    input.ServiceList != null &&
                    this.ServiceList.SequenceEqual(input.ServiceList)
                ) && 
                (
                    this.TypeList == input.TypeList ||
                    this.TypeList != null &&
                    input.TypeList != null &&
                    this.TypeList.SequenceEqual(input.TypeList)
                ) && 
                (
                    this.UnitTypeList == input.UnitTypeList ||
                    this.UnitTypeList != null &&
                    input.UnitTypeList != null &&
                    this.UnitTypeList.SequenceEqual(input.UnitTypeList)
                ) && 
                (
                    this.UnitAmenityList == input.UnitAmenityList ||
                    this.UnitAmenityList != null &&
                    input.UnitAmenityList != null &&
                    this.UnitAmenityList.SequenceEqual(input.UnitAmenityList)
                ) && 
                (
                    this.MealPlanList == input.MealPlanList ||
                    this.MealPlanList != null &&
                    input.MealPlanList != null &&
                    this.MealPlanList.SequenceEqual(input.MealPlanList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdultCount != null)
                    hashCode = hashCode * 59 + this.AdultCount.GetHashCode();
                if (this.ChildCount != null)
                    hashCode = hashCode * 59 + this.ChildCount.GetHashCode();
                if (this.ChildAgeList != null)
                    hashCode = hashCode * 59 + this.ChildAgeList.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.MinLengthOfStay != null)
                    hashCode = hashCode * 59 + this.MinLengthOfStay.GetHashCode();
                if (this.MaxLengthOfStay != null)
                    hashCode = hashCode * 59 + this.MaxLengthOfStay.GetHashCode();
                if (this.LocationName != null)
                    hashCode = hashCode * 59 + this.LocationName.GetHashCode();
                if (this.LocationType != null)
                    hashCode = hashCode * 59 + this.LocationType.GetHashCode();
                if (this.EarliestArrival != null)
                    hashCode = hashCode * 59 + this.EarliestArrival.GetHashCode();
                if (this.LatestReturn != null)
                    hashCode = hashCode * 59 + this.LatestReturn.GetHashCode();
                if (this.Sort != null)
                    hashCode = hashCode * 59 + this.Sort.GetHashCode();
                if (this.ServiceList != null)
                    hashCode = hashCode * 59 + this.ServiceList.GetHashCode();
                if (this.TypeList != null)
                    hashCode = hashCode * 59 + this.TypeList.GetHashCode();
                if (this.UnitTypeList != null)
                    hashCode = hashCode * 59 + this.UnitTypeList.GetHashCode();
                if (this.UnitAmenityList != null)
                    hashCode = hashCode * 59 + this.UnitAmenityList.GetHashCode();
                if (this.MealPlanList != null)
                    hashCode = hashCode * 59 + this.MealPlanList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
