/*
 * lodgea-csharp
 *
 * LODGEA SDK for csharp. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@lodgea.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lodgea-csharp.Client.OpenAPIDateConverter;

namespace lodgea-csharp.com.lodgea.model
{
    /// <summary>
    /// PropertiesPropertyIdGet200ResponseProductListInnerRatePlanListInnerPricingListInner
    /// </summary>
    [DataContract]
    public partial class PropertiesPropertyIdGet200ResponseProductListInnerRatePlanListInnerPricingListInner :  IEquatable<PropertiesPropertyIdGet200ResponseProductListInnerRatePlanListInnerPricingListInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertiesPropertyIdGet200ResponseProductListInnerRatePlanListInnerPricingListInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PropertiesPropertyIdGet200ResponseProductListInnerRatePlanListInnerPricingListInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertiesPropertyIdGet200ResponseProductListInnerRatePlanListInnerPricingListInner" /> class.
        /// </summary>
        /// <param name="dateTime">The timestamp of the pricing information. (required).</param>
        /// <param name="occupancy">The number of occupants for which the pricing applies. (required).</param>
        /// <param name="priceList">A mapping of number of days of stay to prices. (required).</param>
        /// <param name="currencyCode">The currency code for the prices. (required).</param>
        public PropertiesPropertyIdGet200ResponseProductListInnerRatePlanListInnerPricingListInner(decimal dateTime = default(decimal), decimal occupancy = default(decimal), Dictionary<string, decimal> priceList = default(Dictionary<string, decimal>), string currencyCode = default(string))
        {
            // to ensure "dateTime" is required (not null)
            if (dateTime == null)
            {
                throw new InvalidDataException("dateTime is a required property for PropertiesPropertyIdGet200ResponseProductListInnerRatePlanListInnerPricingListInner and cannot be null");
            }
            else
            {
                this.DateTime = dateTime;
            }

            // to ensure "occupancy" is required (not null)
            if (occupancy == null)
            {
                throw new InvalidDataException("occupancy is a required property for PropertiesPropertyIdGet200ResponseProductListInnerRatePlanListInnerPricingListInner and cannot be null");
            }
            else
            {
                this.Occupancy = occupancy;
            }

            // to ensure "priceList" is required (not null)
            if (priceList == null)
            {
                throw new InvalidDataException("priceList is a required property for PropertiesPropertyIdGet200ResponseProductListInnerRatePlanListInnerPricingListInner and cannot be null");
            }
            else
            {
                this.PriceList = priceList;
            }

            // to ensure "currencyCode" is required (not null)
            if (currencyCode == null)
            {
                throw new InvalidDataException("currencyCode is a required property for PropertiesPropertyIdGet200ResponseProductListInnerRatePlanListInnerPricingListInner and cannot be null");
            }
            else
            {
                this.CurrencyCode = currencyCode;
            }

        }

        /// <summary>
        /// The timestamp of the pricing information.
        /// </summary>
        /// <value>The timestamp of the pricing information.</value>
        [DataMember(Name="dateTime", EmitDefaultValue=true)]
        public decimal DateTime { get; set; }

        /// <summary>
        /// The number of occupants for which the pricing applies.
        /// </summary>
        /// <value>The number of occupants for which the pricing applies.</value>
        [DataMember(Name="occupancy", EmitDefaultValue=true)]
        public decimal Occupancy { get; set; }

        /// <summary>
        /// A mapping of number of days of stay to prices.
        /// </summary>
        /// <value>A mapping of number of days of stay to prices.</value>
        [DataMember(Name="priceList", EmitDefaultValue=true)]
        public Dictionary<string, decimal> PriceList { get; set; }

        /// <summary>
        /// The currency code for the prices.
        /// </summary>
        /// <value>The currency code for the prices.</value>
        [DataMember(Name="currencyCode", EmitDefaultValue=true)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PropertiesPropertyIdGet200ResponseProductListInnerRatePlanListInnerPricingListInner {\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  Occupancy: ").Append(Occupancy).Append("\n");
            sb.Append("  PriceList: ").Append(PriceList).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PropertiesPropertyIdGet200ResponseProductListInnerRatePlanListInnerPricingListInner);
        }

        /// <summary>
        /// Returns true if PropertiesPropertyIdGet200ResponseProductListInnerRatePlanListInnerPricingListInner instances are equal
        /// </summary>
        /// <param name="input">Instance of PropertiesPropertyIdGet200ResponseProductListInnerRatePlanListInnerPricingListInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PropertiesPropertyIdGet200ResponseProductListInnerRatePlanListInnerPricingListInner input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DateTime == input.DateTime ||
                    (this.DateTime != null &&
                    this.DateTime.Equals(input.DateTime))
                ) && 
                (
                    this.Occupancy == input.Occupancy ||
                    (this.Occupancy != null &&
                    this.Occupancy.Equals(input.Occupancy))
                ) && 
                (
                    this.PriceList == input.PriceList ||
                    this.PriceList != null &&
                    input.PriceList != null &&
                    this.PriceList.SequenceEqual(input.PriceList)
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DateTime != null)
                    hashCode = hashCode * 59 + this.DateTime.GetHashCode();
                if (this.Occupancy != null)
                    hashCode = hashCode * 59 + this.Occupancy.GetHashCode();
                if (this.PriceList != null)
                    hashCode = hashCode * 59 + this.PriceList.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
