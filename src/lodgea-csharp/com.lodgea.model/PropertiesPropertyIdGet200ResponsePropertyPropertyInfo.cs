/*
 * lodgea-csharp
 *
 * LODGEA SDK for csharp. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@lodgea.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lodgea-csharp.Client.OpenAPIDateConverter;

namespace lodgea-csharp.com.lodgea.model
{
    /// <summary>
    /// General information regarding the property.
    /// </summary>
    [DataContract]
    public partial class PropertiesPropertyIdGet200ResponsePropertyPropertyInfo :  IEquatable<PropertiesPropertyIdGet200ResponsePropertyPropertyInfo>, IValidatableObject
    {
        /// <summary>
        /// A property class type code.&lt;p&gt;See also &lt;a href&#x3D;\&quot;#propertyclass-type-codes\&quot;&gt;in the appendix&lt;/a&gt;.&lt;/p&gt;
        /// </summary>
        /// <value>A property class type code.&lt;p&gt;See also &lt;a href&#x3D;\&quot;#propertyclass-type-codes\&quot;&gt;in the appendix&lt;/a&gt;.&lt;/p&gt;</value>
        public enum CategoryListEnum
        {
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1 = 1,

            /// <summary>
            /// Enum _2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")]
            _2 = 2,

            /// <summary>
            /// Enum _3 for value: 3
            /// </summary>
            [EnumMember(Value = "3")]
            _3 = 3,

            /// <summary>
            /// Enum _4 for value: 4
            /// </summary>
            [EnumMember(Value = "4")]
            _4 = 4,

            /// <summary>
            /// Enum _5 for value: 5
            /// </summary>
            [EnumMember(Value = "5")]
            _5 = 5,

            /// <summary>
            /// Enum _6 for value: 6
            /// </summary>
            [EnumMember(Value = "6")]
            _6 = 6,

            /// <summary>
            /// Enum _7 for value: 7
            /// </summary>
            [EnumMember(Value = "7")]
            _7 = 7,

            /// <summary>
            /// Enum _8 for value: 8
            /// </summary>
            [EnumMember(Value = "8")]
            _8 = 8,

            /// <summary>
            /// Enum _9 for value: 9
            /// </summary>
            [EnumMember(Value = "9")]
            _9 = 9,

            /// <summary>
            /// Enum _10 for value: 10
            /// </summary>
            [EnumMember(Value = "10")]
            _10 = 10,

            /// <summary>
            /// Enum _11 for value: 11
            /// </summary>
            [EnumMember(Value = "11")]
            _11 = 11,

            /// <summary>
            /// Enum _12 for value: 12
            /// </summary>
            [EnumMember(Value = "12")]
            _12 = 12,

            /// <summary>
            /// Enum _13 for value: 13
            /// </summary>
            [EnumMember(Value = "13")]
            _13 = 13,

            /// <summary>
            /// Enum _14 for value: 14
            /// </summary>
            [EnumMember(Value = "14")]
            _14 = 14,

            /// <summary>
            /// Enum _15 for value: 15
            /// </summary>
            [EnumMember(Value = "15")]
            _15 = 15,

            /// <summary>
            /// Enum _16 for value: 16
            /// </summary>
            [EnumMember(Value = "16")]
            _16 = 16,

            /// <summary>
            /// Enum _17 for value: 17
            /// </summary>
            [EnumMember(Value = "17")]
            _17 = 17,

            /// <summary>
            /// Enum _18 for value: 18
            /// </summary>
            [EnumMember(Value = "18")]
            _18 = 18,

            /// <summary>
            /// Enum _19 for value: 19
            /// </summary>
            [EnumMember(Value = "19")]
            _19 = 19,

            /// <summary>
            /// Enum _20 for value: 20
            /// </summary>
            [EnumMember(Value = "20")]
            _20 = 20,

            /// <summary>
            /// Enum _21 for value: 21
            /// </summary>
            [EnumMember(Value = "21")]
            _21 = 21,

            /// <summary>
            /// Enum _22 for value: 22
            /// </summary>
            [EnumMember(Value = "22")]
            _22 = 22,

            /// <summary>
            /// Enum _23 for value: 23
            /// </summary>
            [EnumMember(Value = "23")]
            _23 = 23,

            /// <summary>
            /// Enum _24 for value: 24
            /// </summary>
            [EnumMember(Value = "24")]
            _24 = 24,

            /// <summary>
            /// Enum _25 for value: 25
            /// </summary>
            [EnumMember(Value = "25")]
            _25 = 25,

            /// <summary>
            /// Enum _26 for value: 26
            /// </summary>
            [EnumMember(Value = "26")]
            _26 = 26,

            /// <summary>
            /// Enum _27 for value: 27
            /// </summary>
            [EnumMember(Value = "27")]
            _27 = 27,

            /// <summary>
            /// Enum _28 for value: 28
            /// </summary>
            [EnumMember(Value = "28")]
            _28 = 28,

            /// <summary>
            /// Enum _29 for value: 29
            /// </summary>
            [EnumMember(Value = "29")]
            _29 = 29,

            /// <summary>
            /// Enum _30 for value: 30
            /// </summary>
            [EnumMember(Value = "30")]
            _30 = 30,

            /// <summary>
            /// Enum _31 for value: 31
            /// </summary>
            [EnumMember(Value = "31")]
            _31 = 31,

            /// <summary>
            /// Enum _32 for value: 32
            /// </summary>
            [EnumMember(Value = "32")]
            _32 = 32,

            /// <summary>
            /// Enum _33 for value: 33
            /// </summary>
            [EnumMember(Value = "33")]
            _33 = 33,

            /// <summary>
            /// Enum _34 for value: 34
            /// </summary>
            [EnumMember(Value = "34")]
            _34 = 34,

            /// <summary>
            /// Enum _35 for value: 35
            /// </summary>
            [EnumMember(Value = "35")]
            _35 = 35,

            /// <summary>
            /// Enum _36 for value: 36
            /// </summary>
            [EnumMember(Value = "36")]
            _36 = 36,

            /// <summary>
            /// Enum _37 for value: 37
            /// </summary>
            [EnumMember(Value = "37")]
            _37 = 37,

            /// <summary>
            /// Enum _38 for value: 38
            /// </summary>
            [EnumMember(Value = "38")]
            _38 = 38,

            /// <summary>
            /// Enum _39 for value: 39
            /// </summary>
            [EnumMember(Value = "39")]
            _39 = 39,

            /// <summary>
            /// Enum _40 for value: 40
            /// </summary>
            [EnumMember(Value = "40")]
            _40 = 40,

            /// <summary>
            /// Enum _41 for value: 41
            /// </summary>
            [EnumMember(Value = "41")]
            _41 = 41,

            /// <summary>
            /// Enum _42 for value: 42
            /// </summary>
            [EnumMember(Value = "42")]
            _42 = 42,

            /// <summary>
            /// Enum _43 for value: 43
            /// </summary>
            [EnumMember(Value = "43")]
            _43 = 43,

            /// <summary>
            /// Enum _44 for value: 44
            /// </summary>
            [EnumMember(Value = "44")]
            _44 = 44,

            /// <summary>
            /// Enum _45 for value: 45
            /// </summary>
            [EnumMember(Value = "45")]
            _45 = 45,

            /// <summary>
            /// Enum _46 for value: 46
            /// </summary>
            [EnumMember(Value = "46")]
            _46 = 46,

            /// <summary>
            /// Enum _47 for value: 47
            /// </summary>
            [EnumMember(Value = "47")]
            _47 = 47,

            /// <summary>
            /// Enum _48 for value: 48
            /// </summary>
            [EnumMember(Value = "48")]
            _48 = 48,

            /// <summary>
            /// Enum _49 for value: 49
            /// </summary>
            [EnumMember(Value = "49")]
            _49 = 49,

            /// <summary>
            /// Enum _50 for value: 50
            /// </summary>
            [EnumMember(Value = "50")]
            _50 = 50,

            /// <summary>
            /// Enum _51 for value: 51
            /// </summary>
            [EnumMember(Value = "51")]
            _51 = 51,

            /// <summary>
            /// Enum _52 for value: 52
            /// </summary>
            [EnumMember(Value = "52")]
            _52 = 52,

            /// <summary>
            /// Enum _53 for value: 53
            /// </summary>
            [EnumMember(Value = "53")]
            _53 = 53,

            /// <summary>
            /// Enum _54 for value: 54
            /// </summary>
            [EnumMember(Value = "54")]
            _54 = 54,

            /// <summary>
            /// Enum _55 for value: 55
            /// </summary>
            [EnumMember(Value = "55")]
            _55 = 55,

            /// <summary>
            /// Enum _56 for value: 56
            /// </summary>
            [EnumMember(Value = "56")]
            _56 = 56,

            /// <summary>
            /// Enum _57 for value: 57
            /// </summary>
            [EnumMember(Value = "57")]
            _57 = 57,

            /// <summary>
            /// Enum _58 for value: 58
            /// </summary>
            [EnumMember(Value = "58")]
            _58 = 58,

            /// <summary>
            /// Enum _59 for value: 59
            /// </summary>
            [EnumMember(Value = "59")]
            _59 = 59,

            /// <summary>
            /// Enum _60 for value: 60
            /// </summary>
            [EnumMember(Value = "60")]
            _60 = 60,

            /// <summary>
            /// Enum _61 for value: 61
            /// </summary>
            [EnumMember(Value = "61")]
            _61 = 61,

            /// <summary>
            /// Enum _62 for value: 62
            /// </summary>
            [EnumMember(Value = "62")]
            _62 = 62,

            /// <summary>
            /// Enum _5000 for value: 5000
            /// </summary>
            [EnumMember(Value = "5000")]
            _5000 = 63,

            /// <summary>
            /// Enum _5001 for value: 5001
            /// </summary>
            [EnumMember(Value = "5001")]
            _5001 = 64,

            /// <summary>
            /// Enum _5002 for value: 5002
            /// </summary>
            [EnumMember(Value = "5002")]
            _5002 = 65,

            /// <summary>
            /// Enum _5003 for value: 5003
            /// </summary>
            [EnumMember(Value = "5003")]
            _5003 = 66,

            /// <summary>
            /// Enum _5004 for value: 5004
            /// </summary>
            [EnumMember(Value = "5004")]
            _5004 = 67,

            /// <summary>
            /// Enum _5005 for value: 5005
            /// </summary>
            [EnumMember(Value = "5005")]
            _5005 = 68,

            /// <summary>
            /// Enum _5006 for value: 5006
            /// </summary>
            [EnumMember(Value = "5006")]
            _5006 = 69,

            /// <summary>
            /// Enum _5007 for value: 5007
            /// </summary>
            [EnumMember(Value = "5007")]
            _5007 = 70,

            /// <summary>
            /// Enum _5008 for value: 5008
            /// </summary>
            [EnumMember(Value = "5008")]
            _5008 = 71,

            /// <summary>
            /// Enum _5009 for value: 5009
            /// </summary>
            [EnumMember(Value = "5009")]
            _5009 = 72

        }

        /// <summary>
        /// Defines LanguageList
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LanguageListEnum
        {
            /// <summary>
            /// Enum Af for value: af
            /// </summary>
            [EnumMember(Value = "af")]
            Af = 1,

            /// <summary>
            /// Enum Ar for value: ar
            /// </summary>
            [EnumMember(Value = "ar")]
            Ar = 2,

            /// <summary>
            /// Enum Az for value: az
            /// </summary>
            [EnumMember(Value = "az")]
            Az = 3,

            /// <summary>
            /// Enum Be for value: be
            /// </summary>
            [EnumMember(Value = "be")]
            Be = 4,

            /// <summary>
            /// Enum Bg for value: bg
            /// </summary>
            [EnumMember(Value = "bg")]
            Bg = 5,

            /// <summary>
            /// Enum Ca for value: ca
            /// </summary>
            [EnumMember(Value = "ca")]
            Ca = 6,

            /// <summary>
            /// Enum Cs for value: cs
            /// </summary>
            [EnumMember(Value = "cs")]
            Cs = 7,

            /// <summary>
            /// Enum Da for value: da
            /// </summary>
            [EnumMember(Value = "da")]
            Da = 8,

            /// <summary>
            /// Enum De for value: de
            /// </summary>
            [EnumMember(Value = "de")]
            De = 9,

            /// <summary>
            /// Enum El for value: el
            /// </summary>
            [EnumMember(Value = "el")]
            El = 10,

            /// <summary>
            /// Enum En for value: en
            /// </summary>
            [EnumMember(Value = "en")]
            En = 11,

            /// <summary>
            /// Enum EnGb for value: en-gb
            /// </summary>
            [EnumMember(Value = "en-gb")]
            EnGb = 12,

            /// <summary>
            /// Enum EnUs for value: en-us
            /// </summary>
            [EnumMember(Value = "en-us")]
            EnUs = 13,

            /// <summary>
            /// Enum Es for value: es
            /// </summary>
            [EnumMember(Value = "es")]
            Es = 14,

            /// <summary>
            /// Enum EsAr for value: es-ar
            /// </summary>
            [EnumMember(Value = "es-ar")]
            EsAr = 15,

            /// <summary>
            /// Enum Et for value: et
            /// </summary>
            [EnumMember(Value = "et")]
            Et = 16,

            /// <summary>
            /// Enum Fr for value: fr
            /// </summary>
            [EnumMember(Value = "fr")]
            Fr = 17,

            /// <summary>
            /// Enum Fi for value: fi
            /// </summary>
            [EnumMember(Value = "fi")]
            Fi = 18,

            /// <summary>
            /// Enum He for value: he
            /// </summary>
            [EnumMember(Value = "he")]
            He = 19,

            /// <summary>
            /// Enum Hi for value: hi
            /// </summary>
            [EnumMember(Value = "hi")]
            Hi = 20,

            /// <summary>
            /// Enum Hr for value: hr
            /// </summary>
            [EnumMember(Value = "hr")]
            Hr = 21,

            /// <summary>
            /// Enum Hu for value: hu
            /// </summary>
            [EnumMember(Value = "hu")]
            Hu = 22,

            /// <summary>
            /// Enum Id for value: id
            /// </summary>
            [EnumMember(Value = "id")]
            Id = 23,

            /// <summary>
            /// Enum Is for value: is
            /// </summary>
            [EnumMember(Value = "is")]
            Is = 24,

            /// <summary>
            /// Enum It for value: it
            /// </summary>
            [EnumMember(Value = "it")]
            It = 25,

            /// <summary>
            /// Enum Ja for value: ja
            /// </summary>
            [EnumMember(Value = "ja")]
            Ja = 26,

            /// <summary>
            /// Enum Km for value: km
            /// </summary>
            [EnumMember(Value = "km")]
            Km = 27,

            /// <summary>
            /// Enum Ko for value: ko
            /// </summary>
            [EnumMember(Value = "ko")]
            Ko = 28,

            /// <summary>
            /// Enum Lo for value: lo
            /// </summary>
            [EnumMember(Value = "lo")]
            Lo = 29,

            /// <summary>
            /// Enum Lt for value: lt
            /// </summary>
            [EnumMember(Value = "lt")]
            Lt = 30,

            /// <summary>
            /// Enum Lv for value: lv
            /// </summary>
            [EnumMember(Value = "lv")]
            Lv = 31,

            /// <summary>
            /// Enum Ms for value: ms
            /// </summary>
            [EnumMember(Value = "ms")]
            Ms = 32,

            /// <summary>
            /// Enum Nl for value: nl
            /// </summary>
            [EnumMember(Value = "nl")]
            Nl = 33,

            /// <summary>
            /// Enum No for value: no
            /// </summary>
            [EnumMember(Value = "no")]
            No = 34,

            /// <summary>
            /// Enum Pl for value: pl
            /// </summary>
            [EnumMember(Value = "pl")]
            Pl = 35,

            /// <summary>
            /// Enum Pt for value: pt
            /// </summary>
            [EnumMember(Value = "pt")]
            Pt = 36,

            /// <summary>
            /// Enum PtBr for value: pt-br
            /// </summary>
            [EnumMember(Value = "pt-br")]
            PtBr = 37,

            /// <summary>
            /// Enum PtPt for value: pt-pt
            /// </summary>
            [EnumMember(Value = "pt-pt")]
            PtPt = 38,

            /// <summary>
            /// Enum Ro for value: ro
            /// </summary>
            [EnumMember(Value = "ro")]
            Ro = 39,

            /// <summary>
            /// Enum Ru for value: ru
            /// </summary>
            [EnumMember(Value = "ru")]
            Ru = 40,

            /// <summary>
            /// Enum Sk for value: sk
            /// </summary>
            [EnumMember(Value = "sk")]
            Sk = 41,

            /// <summary>
            /// Enum Sl for value: sl
            /// </summary>
            [EnumMember(Value = "sl")]
            Sl = 42,

            /// <summary>
            /// Enum Sr for value: sr
            /// </summary>
            [EnumMember(Value = "sr")]
            Sr = 43,

            /// <summary>
            /// Enum Sv for value: sv
            /// </summary>
            [EnumMember(Value = "sv")]
            Sv = 44,

            /// <summary>
            /// Enum Tl for value: tl
            /// </summary>
            [EnumMember(Value = "tl")]
            Tl = 45,

            /// <summary>
            /// Enum Th for value: th
            /// </summary>
            [EnumMember(Value = "th")]
            Th = 46,

            /// <summary>
            /// Enum Tr for value: tr
            /// </summary>
            [EnumMember(Value = "tr")]
            Tr = 47,

            /// <summary>
            /// Enum Uk for value: uk
            /// </summary>
            [EnumMember(Value = "uk")]
            Uk = 48,

            /// <summary>
            /// Enum Vi for value: vi
            /// </summary>
            [EnumMember(Value = "vi")]
            Vi = 49,

            /// <summary>
            /// Enum Xa for value: xa
            /// </summary>
            [EnumMember(Value = "xa")]
            Xa = 50,

            /// <summary>
            /// Enum Xb for value: xb
            /// </summary>
            [EnumMember(Value = "xb")]
            Xb = 51,

            /// <summary>
            /// Enum Xs for value: xs
            /// </summary>
            [EnumMember(Value = "xs")]
            Xs = 52,

            /// <summary>
            /// Enum Xt for value: xt
            /// </summary>
            [EnumMember(Value = "xt")]
            Xt = 53,

            /// <summary>
            /// Enum Xu for value: xu
            /// </summary>
            [EnumMember(Value = "xu")]
            Xu = 54,

            /// <summary>
            /// Enum Zh for value: zh
            /// </summary>
            [EnumMember(Value = "zh")]
            Zh = 55,

            /// <summary>
            /// Enum ZhCn for value: zh-cn
            /// </summary>
            [EnumMember(Value = "zh-cn")]
            ZhCn = 56,

            /// <summary>
            /// Enum ZhTw for value: zh-tw
            /// </summary>
            [EnumMember(Value = "zh-tw")]
            ZhTw = 57

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PropertiesPropertyIdGet200ResponsePropertyPropertyInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PropertiesPropertyIdGet200ResponsePropertyPropertyInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertiesPropertyIdGet200ResponsePropertyPropertyInfo" /> class.
        /// </summary>
        /// <param name="unitCount">The amount of units the property has..</param>
        /// <param name="messageList">Contains a descriptive message for this property in all supported languages. (required).</param>
        /// <param name="categoryList">A list of code of the property class types that apply to the property. (required).</param>
        /// <param name="languageList">The codes of languages the staff of this property can speak. Please note that these codes partially differ from the two character ISO language codes widely used throughout the API as they partially include country specific language code.&lt;p&gt;See also &lt;a href&#x3D;\&quot;#languagecountry-code\&quot;&gt;in the appendix&lt;/a&gt;.&lt;/p&gt; (required).</param>
        /// <param name="location">location.</param>
        /// <param name="acceptedPaymentList">A list of the accepted payment methods. Payment methods might subject to frequent change as payment providers come and go. You should always implement a way to handle new, unexpected payment methods.&lt;p&gt;See also &lt;a href&#x3D;\&quot;#paymenttypes\&quot;&gt;in the appendix&lt;/a&gt;.&lt;/p&gt; (required).</param>
        public PropertiesPropertyIdGet200ResponsePropertyPropertyInfo(decimal unitCount = default(decimal), List<PropertiesPropertyIdGet200ResponsePropertyPropertyInfoMessageListInner> messageList = default(List<PropertiesPropertyIdGet200ResponsePropertyPropertyInfoMessageListInner>), List<CategoryListEnum> categoryList = default(List<CategoryListEnum>), List<LanguageListEnum> languageList = default(List<LanguageListEnum>), AvailablePropertiesInner1GeoLocation location = default(AvailablePropertiesInner1GeoLocation), List<PropertiesPropertyIdGet200ResponsePropertyPropertyInfoAcceptedPaymentListInner> acceptedPaymentList = default(List<PropertiesPropertyIdGet200ResponsePropertyPropertyInfoAcceptedPaymentListInner>))
        {
            // to ensure "messageList" is required (not null)
            if (messageList == null)
            {
                throw new InvalidDataException("messageList is a required property for PropertiesPropertyIdGet200ResponsePropertyPropertyInfo and cannot be null");
            }
            else
            {
                this.MessageList = messageList;
            }

            // to ensure "categoryList" is required (not null)
            if (categoryList == null)
            {
                throw new InvalidDataException("categoryList is a required property for PropertiesPropertyIdGet200ResponsePropertyPropertyInfo and cannot be null");
            }
            else
            {
                this.CategoryList = categoryList;
            }

            // to ensure "languageList" is required (not null)
            if (languageList == null)
            {
                throw new InvalidDataException("languageList is a required property for PropertiesPropertyIdGet200ResponsePropertyPropertyInfo and cannot be null");
            }
            else
            {
                this.LanguageList = languageList;
            }

            // to ensure "acceptedPaymentList" is required (not null)
            if (acceptedPaymentList == null)
            {
                throw new InvalidDataException("acceptedPaymentList is a required property for PropertiesPropertyIdGet200ResponsePropertyPropertyInfo and cannot be null");
            }
            else
            {
                this.AcceptedPaymentList = acceptedPaymentList;
            }

            this.UnitCount = unitCount;
            this.Location = location;
        }

        /// <summary>
        /// The amount of units the property has.
        /// </summary>
        /// <value>The amount of units the property has.</value>
        [DataMember(Name="unitCount", EmitDefaultValue=false)]
        public decimal UnitCount { get; set; }

        /// <summary>
        /// Contains a descriptive message for this property in all supported languages.
        /// </summary>
        /// <value>Contains a descriptive message for this property in all supported languages.</value>
        [DataMember(Name="messageList", EmitDefaultValue=true)]
        public List<PropertiesPropertyIdGet200ResponsePropertyPropertyInfoMessageListInner> MessageList { get; set; }

        /// <summary>
        /// A list of code of the property class types that apply to the property.
        /// </summary>
        /// <value>A list of code of the property class types that apply to the property.</value>
        [DataMember(Name="categoryList", EmitDefaultValue=true)]
        public List<PropertiesPropertyIdGet200ResponsePropertyPropertyInfo.CategoryListEnum> CategoryList { get; set; }

        /// <summary>
        /// The codes of languages the staff of this property can speak. Please note that these codes partially differ from the two character ISO language codes widely used throughout the API as they partially include country specific language code.&lt;p&gt;See also &lt;a href&#x3D;\&quot;#languagecountry-code\&quot;&gt;in the appendix&lt;/a&gt;.&lt;/p&gt;
        /// </summary>
        /// <value>The codes of languages the staff of this property can speak. Please note that these codes partially differ from the two character ISO language codes widely used throughout the API as they partially include country specific language code.&lt;p&gt;See also &lt;a href&#x3D;\&quot;#languagecountry-code\&quot;&gt;in the appendix&lt;/a&gt;.&lt;/p&gt;</value>
        [DataMember(Name="languageList", EmitDefaultValue=true)]
        public List<PropertiesPropertyIdGet200ResponsePropertyPropertyInfo.LanguageListEnum> LanguageList { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public AvailablePropertiesInner1GeoLocation Location { get; set; }

        /// <summary>
        /// A list of the accepted payment methods. Payment methods might subject to frequent change as payment providers come and go. You should always implement a way to handle new, unexpected payment methods.&lt;p&gt;See also &lt;a href&#x3D;\&quot;#paymenttypes\&quot;&gt;in the appendix&lt;/a&gt;.&lt;/p&gt;
        /// </summary>
        /// <value>A list of the accepted payment methods. Payment methods might subject to frequent change as payment providers come and go. You should always implement a way to handle new, unexpected payment methods.&lt;p&gt;See also &lt;a href&#x3D;\&quot;#paymenttypes\&quot;&gt;in the appendix&lt;/a&gt;.&lt;/p&gt;</value>
        [DataMember(Name="acceptedPaymentList", EmitDefaultValue=true)]
        public List<PropertiesPropertyIdGet200ResponsePropertyPropertyInfoAcceptedPaymentListInner> AcceptedPaymentList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PropertiesPropertyIdGet200ResponsePropertyPropertyInfo {\n");
            sb.Append("  UnitCount: ").Append(UnitCount).Append("\n");
            sb.Append("  MessageList: ").Append(MessageList).Append("\n");
            sb.Append("  CategoryList: ").Append(CategoryList).Append("\n");
            sb.Append("  LanguageList: ").Append(LanguageList).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  AcceptedPaymentList: ").Append(AcceptedPaymentList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PropertiesPropertyIdGet200ResponsePropertyPropertyInfo);
        }

        /// <summary>
        /// Returns true if PropertiesPropertyIdGet200ResponsePropertyPropertyInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of PropertiesPropertyIdGet200ResponsePropertyPropertyInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PropertiesPropertyIdGet200ResponsePropertyPropertyInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UnitCount == input.UnitCount ||
                    (this.UnitCount != null &&
                    this.UnitCount.Equals(input.UnitCount))
                ) && 
                (
                    this.MessageList == input.MessageList ||
                    this.MessageList != null &&
                    input.MessageList != null &&
                    this.MessageList.SequenceEqual(input.MessageList)
                ) && 
                (
                    this.CategoryList == input.CategoryList ||
                    this.CategoryList != null &&
                    input.CategoryList != null &&
                    this.CategoryList.SequenceEqual(input.CategoryList)
                ) && 
                (
                    this.LanguageList == input.LanguageList ||
                    this.LanguageList != null &&
                    input.LanguageList != null &&
                    this.LanguageList.SequenceEqual(input.LanguageList)
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.AcceptedPaymentList == input.AcceptedPaymentList ||
                    this.AcceptedPaymentList != null &&
                    input.AcceptedPaymentList != null &&
                    this.AcceptedPaymentList.SequenceEqual(input.AcceptedPaymentList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UnitCount != null)
                    hashCode = hashCode * 59 + this.UnitCount.GetHashCode();
                if (this.MessageList != null)
                    hashCode = hashCode * 59 + this.MessageList.GetHashCode();
                if (this.CategoryList != null)
                    hashCode = hashCode * 59 + this.CategoryList.GetHashCode();
                if (this.LanguageList != null)
                    hashCode = hashCode * 59 + this.LanguageList.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.AcceptedPaymentList != null)
                    hashCode = hashCode * 59 + this.AcceptedPaymentList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
