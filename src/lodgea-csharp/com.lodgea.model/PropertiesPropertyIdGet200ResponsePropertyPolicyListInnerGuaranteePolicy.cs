/*
 * lodgea-csharp
 *
 * LODGEA SDK for csharp. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@lodgea.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = lodgea-csharp.Client.OpenAPIDateConverter;

namespace lodgea-csharp.com.lodgea.model
{
    /// <summary>
    /// Defines the guarantee amount that has to be paid to the property.
    /// </summary>
    [DataContract]
    public partial class PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerGuaranteePolicy :  IEquatable<PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerGuaranteePolicy>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerGuaranteePolicy" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerGuaranteePolicy() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerGuaranteePolicy" /> class.
        /// </summary>
        /// <param name="percentAfterReservation">Percentage of refund after reservation. (required).</param>
        /// <param name="nightsAfterReservation">Number of nights after reservation. (required).</param>
        /// <param name="deadlineDays">Deadline in days. (required).</param>
        /// <param name="deadlineHours">Deadline in hours. (required).</param>
        /// <param name="percentAfterDeadline">Percentage of refund after deadline. (required).</param>
        /// <param name="nightsAfterDeadline">Number of nights after deadline. (required).</param>
        /// <param name="noShowPolicy">No-show policy (required).</param>
        public PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerGuaranteePolicy(decimal percentAfterReservation = default(decimal), decimal nightsAfterReservation = default(decimal), decimal deadlineDays = default(decimal), decimal deadlineHours = default(decimal), decimal percentAfterDeadline = default(decimal), decimal nightsAfterDeadline = default(decimal), string noShowPolicy = default(string))
        {
            // to ensure "percentAfterReservation" is required (not null)
            if (percentAfterReservation == null)
            {
                throw new InvalidDataException("percentAfterReservation is a required property for PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerGuaranteePolicy and cannot be null");
            }
            else
            {
                this.PercentAfterReservation = percentAfterReservation;
            }

            // to ensure "nightsAfterReservation" is required (not null)
            if (nightsAfterReservation == null)
            {
                throw new InvalidDataException("nightsAfterReservation is a required property for PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerGuaranteePolicy and cannot be null");
            }
            else
            {
                this.NightsAfterReservation = nightsAfterReservation;
            }

            // to ensure "deadlineDays" is required (not null)
            if (deadlineDays == null)
            {
                throw new InvalidDataException("deadlineDays is a required property for PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerGuaranteePolicy and cannot be null");
            }
            else
            {
                this.DeadlineDays = deadlineDays;
            }

            // to ensure "deadlineHours" is required (not null)
            if (deadlineHours == null)
            {
                throw new InvalidDataException("deadlineHours is a required property for PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerGuaranteePolicy and cannot be null");
            }
            else
            {
                this.DeadlineHours = deadlineHours;
            }

            // to ensure "percentAfterDeadline" is required (not null)
            if (percentAfterDeadline == null)
            {
                throw new InvalidDataException("percentAfterDeadline is a required property for PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerGuaranteePolicy and cannot be null");
            }
            else
            {
                this.PercentAfterDeadline = percentAfterDeadline;
            }

            // to ensure "nightsAfterDeadline" is required (not null)
            if (nightsAfterDeadline == null)
            {
                throw new InvalidDataException("nightsAfterDeadline is a required property for PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerGuaranteePolicy and cannot be null");
            }
            else
            {
                this.NightsAfterDeadline = nightsAfterDeadline;
            }

            // to ensure "noShowPolicy" is required (not null)
            if (noShowPolicy == null)
            {
                throw new InvalidDataException("noShowPolicy is a required property for PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerGuaranteePolicy and cannot be null");
            }
            else
            {
                this.NoShowPolicy = noShowPolicy;
            }

        }

        /// <summary>
        /// Percentage of refund after reservation.
        /// </summary>
        /// <value>Percentage of refund after reservation.</value>
        [DataMember(Name="percentAfterReservation", EmitDefaultValue=true)]
        public decimal PercentAfterReservation { get; set; }

        /// <summary>
        /// Number of nights after reservation.
        /// </summary>
        /// <value>Number of nights after reservation.</value>
        [DataMember(Name="nightsAfterReservation", EmitDefaultValue=true)]
        public decimal NightsAfterReservation { get; set; }

        /// <summary>
        /// Deadline in days.
        /// </summary>
        /// <value>Deadline in days.</value>
        [DataMember(Name="deadlineDays", EmitDefaultValue=true)]
        public decimal DeadlineDays { get; set; }

        /// <summary>
        /// Deadline in hours.
        /// </summary>
        /// <value>Deadline in hours.</value>
        [DataMember(Name="deadlineHours", EmitDefaultValue=true)]
        public decimal DeadlineHours { get; set; }

        /// <summary>
        /// Percentage of refund after deadline.
        /// </summary>
        /// <value>Percentage of refund after deadline.</value>
        [DataMember(Name="percentAfterDeadline", EmitDefaultValue=true)]
        public decimal PercentAfterDeadline { get; set; }

        /// <summary>
        /// Number of nights after deadline.
        /// </summary>
        /// <value>Number of nights after deadline.</value>
        [DataMember(Name="nightsAfterDeadline", EmitDefaultValue=true)]
        public decimal NightsAfterDeadline { get; set; }

        /// <summary>
        /// No-show policy
        /// </summary>
        /// <value>No-show policy</value>
        [DataMember(Name="noShowPolicy", EmitDefaultValue=true)]
        public string NoShowPolicy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerGuaranteePolicy {\n");
            sb.Append("  PercentAfterReservation: ").Append(PercentAfterReservation).Append("\n");
            sb.Append("  NightsAfterReservation: ").Append(NightsAfterReservation).Append("\n");
            sb.Append("  DeadlineDays: ").Append(DeadlineDays).Append("\n");
            sb.Append("  DeadlineHours: ").Append(DeadlineHours).Append("\n");
            sb.Append("  PercentAfterDeadline: ").Append(PercentAfterDeadline).Append("\n");
            sb.Append("  NightsAfterDeadline: ").Append(NightsAfterDeadline).Append("\n");
            sb.Append("  NoShowPolicy: ").Append(NoShowPolicy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerGuaranteePolicy);
        }

        /// <summary>
        /// Returns true if PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerGuaranteePolicy instances are equal
        /// </summary>
        /// <param name="input">Instance of PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerGuaranteePolicy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PropertiesPropertyIdGet200ResponsePropertyPolicyListInnerGuaranteePolicy input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PercentAfterReservation == input.PercentAfterReservation ||
                    (this.PercentAfterReservation != null &&
                    this.PercentAfterReservation.Equals(input.PercentAfterReservation))
                ) && 
                (
                    this.NightsAfterReservation == input.NightsAfterReservation ||
                    (this.NightsAfterReservation != null &&
                    this.NightsAfterReservation.Equals(input.NightsAfterReservation))
                ) && 
                (
                    this.DeadlineDays == input.DeadlineDays ||
                    (this.DeadlineDays != null &&
                    this.DeadlineDays.Equals(input.DeadlineDays))
                ) && 
                (
                    this.DeadlineHours == input.DeadlineHours ||
                    (this.DeadlineHours != null &&
                    this.DeadlineHours.Equals(input.DeadlineHours))
                ) && 
                (
                    this.PercentAfterDeadline == input.PercentAfterDeadline ||
                    (this.PercentAfterDeadline != null &&
                    this.PercentAfterDeadline.Equals(input.PercentAfterDeadline))
                ) && 
                (
                    this.NightsAfterDeadline == input.NightsAfterDeadline ||
                    (this.NightsAfterDeadline != null &&
                    this.NightsAfterDeadline.Equals(input.NightsAfterDeadline))
                ) && 
                (
                    this.NoShowPolicy == input.NoShowPolicy ||
                    (this.NoShowPolicy != null &&
                    this.NoShowPolicy.Equals(input.NoShowPolicy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PercentAfterReservation != null)
                    hashCode = hashCode * 59 + this.PercentAfterReservation.GetHashCode();
                if (this.NightsAfterReservation != null)
                    hashCode = hashCode * 59 + this.NightsAfterReservation.GetHashCode();
                if (this.DeadlineDays != null)
                    hashCode = hashCode * 59 + this.DeadlineDays.GetHashCode();
                if (this.DeadlineHours != null)
                    hashCode = hashCode * 59 + this.DeadlineHours.GetHashCode();
                if (this.PercentAfterDeadline != null)
                    hashCode = hashCode * 59 + this.PercentAfterDeadline.GetHashCode();
                if (this.NightsAfterDeadline != null)
                    hashCode = hashCode * 59 + this.NightsAfterDeadline.GetHashCode();
                if (this.NoShowPolicy != null)
                    hashCode = hashCode * 59 + this.NoShowPolicy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
