/*
 * lodgea-csharp
 *
 * LODGEA SDK for csharp. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@lodgea.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using lodgea-csharp.Client;
using lodgea-csharp.com.lodgea.model;

namespace lodgea-csharp.com.lodgea.controllers
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Search for availability
        /// </summary>
        /// <remarks>
        /// Get availability information based on search criteria.
        /// </remarks>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="availabilitySearchPostRequest"> (optional)</param>
        /// <returns>AvailabilitySearchPost200Response</returns>
        AvailabilitySearchPost200Response AvailabilitySearchPost (AvailabilitySearchPostRequest availabilitySearchPostRequest = default(AvailabilitySearchPostRequest));

        /// <summary>
        /// Search for availability
        /// </summary>
        /// <remarks>
        /// Get availability information based on search criteria.
        /// </remarks>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="availabilitySearchPostRequest"> (optional)</param>
        /// <returns>ApiResponse of AvailabilitySearchPost200Response</returns>
        ApiResponse<AvailabilitySearchPost200Response> AvailabilitySearchPostWithHttpInfo (AvailabilitySearchPostRequest availabilitySearchPostRequest = default(AvailabilitySearchPostRequest));
        /// <summary>
        /// Search for location
        /// </summary>
        /// <remarks>
        /// Get a list of locations and their lowest available rate related to a given keyword.
        /// </remarks>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationSearchPostRequest"> (optional)</param>
        /// <returns>LocationSearchPost200Response</returns>
        LocationSearchPost200Response LocationSearchPost (LocationSearchPostRequest locationSearchPostRequest = default(LocationSearchPostRequest));

        /// <summary>
        /// Search for location
        /// </summary>
        /// <remarks>
        /// Get a list of locations and their lowest available rate related to a given keyword.
        /// </remarks>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationSearchPostRequest"> (optional)</param>
        /// <returns>ApiResponse of LocationSearchPost200Response</returns>
        ApiResponse<LocationSearchPost200Response> LocationSearchPostWithHttpInfo (LocationSearchPostRequest locationSearchPostRequest = default(LocationSearchPostRequest));
        /// <summary>
        /// List (filtered) properties
        /// </summary>
        /// <remarks>
        /// List properties, optionally filtered by a keyword.
        /// </remarks>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <returns>PropertiesGet200Response</returns>
        PropertiesGet200Response PropertiesGet (string keyword = default(string), string pageToken = default(string));

        /// <summary>
        /// List (filtered) properties
        /// </summary>
        /// <remarks>
        /// List properties, optionally filtered by a keyword.
        /// </remarks>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <returns>ApiResponse of PropertiesGet200Response</returns>
        ApiResponse<PropertiesGet200Response> PropertiesGetWithHttpInfo (string keyword = default(string), string pageToken = default(string));
        /// <summary>
        /// Get a properties availability
        /// </summary>
        /// <remarks>
        /// Get detailed availability information for a specific property.
        /// </remarks>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyId"></param>
        /// <param name="currencyCode"></param>
        /// <returns>PropertiesPropertyIdAvailabilityGet200Response</returns>
        PropertiesPropertyIdAvailabilityGet200Response PropertiesPropertyIdAvailabilityGet (string propertyId, string currencyCode);

        /// <summary>
        /// Get a properties availability
        /// </summary>
        /// <remarks>
        /// Get detailed availability information for a specific property.
        /// </remarks>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyId"></param>
        /// <param name="currencyCode"></param>
        /// <returns>ApiResponse of PropertiesPropertyIdAvailabilityGet200Response</returns>
        ApiResponse<PropertiesPropertyIdAvailabilityGet200Response> PropertiesPropertyIdAvailabilityGetWithHttpInfo (string propertyId, string currencyCode);
        /// <summary>
        /// Get a properties details
        /// </summary>
        /// <remarks>
        /// Get all information about a specific property by its ID.
        /// </remarks>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyId"></param>
        /// <returns>PropertiesPropertyIdGet200Response</returns>
        PropertiesPropertyIdGet200Response PropertiesPropertyIdGet (string propertyId);

        /// <summary>
        /// Get a properties details
        /// </summary>
        /// <remarks>
        /// Get all information about a specific property by its ID.
        /// </remarks>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyId"></param>
        /// <returns>ApiResponse of PropertiesPropertyIdGet200Response</returns>
        ApiResponse<PropertiesPropertyIdGet200Response> PropertiesPropertyIdGetWithHttpInfo (string propertyId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Search for availability
        /// </summary>
        /// <remarks>
        /// Get availability information based on search criteria.
        /// </remarks>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="availabilitySearchPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AvailabilitySearchPost200Response</returns>
        System.Threading.Tasks.Task<AvailabilitySearchPost200Response> AvailabilitySearchPostAsync (AvailabilitySearchPostRequest availabilitySearchPostRequest = default(AvailabilitySearchPostRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Search for availability
        /// </summary>
        /// <remarks>
        /// Get availability information based on search criteria.
        /// </remarks>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="availabilitySearchPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AvailabilitySearchPost200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AvailabilitySearchPost200Response>> AvailabilitySearchPostWithHttpInfoAsync (AvailabilitySearchPostRequest availabilitySearchPostRequest = default(AvailabilitySearchPostRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Search for location
        /// </summary>
        /// <remarks>
        /// Get a list of locations and their lowest available rate related to a given keyword.
        /// </remarks>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationSearchPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of LocationSearchPost200Response</returns>
        System.Threading.Tasks.Task<LocationSearchPost200Response> LocationSearchPostAsync (LocationSearchPostRequest locationSearchPostRequest = default(LocationSearchPostRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Search for location
        /// </summary>
        /// <remarks>
        /// Get a list of locations and their lowest available rate related to a given keyword.
        /// </remarks>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationSearchPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (LocationSearchPost200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<LocationSearchPost200Response>> LocationSearchPostWithHttpInfoAsync (LocationSearchPostRequest locationSearchPostRequest = default(LocationSearchPostRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List (filtered) properties
        /// </summary>
        /// <remarks>
        /// List properties, optionally filtered by a keyword.
        /// </remarks>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PropertiesGet200Response</returns>
        System.Threading.Tasks.Task<PropertiesGet200Response> PropertiesGetAsync (string keyword = default(string), string pageToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List (filtered) properties
        /// </summary>
        /// <remarks>
        /// List properties, optionally filtered by a keyword.
        /// </remarks>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PropertiesGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertiesGet200Response>> PropertiesGetWithHttpInfoAsync (string keyword = default(string), string pageToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a properties availability
        /// </summary>
        /// <remarks>
        /// Get detailed availability information for a specific property.
        /// </remarks>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyId"></param>
        /// <param name="currencyCode"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PropertiesPropertyIdAvailabilityGet200Response</returns>
        System.Threading.Tasks.Task<PropertiesPropertyIdAvailabilityGet200Response> PropertiesPropertyIdAvailabilityGetAsync (string propertyId, string currencyCode, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a properties availability
        /// </summary>
        /// <remarks>
        /// Get detailed availability information for a specific property.
        /// </remarks>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyId"></param>
        /// <param name="currencyCode"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PropertiesPropertyIdAvailabilityGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertiesPropertyIdAvailabilityGet200Response>> PropertiesPropertyIdAvailabilityGetWithHttpInfoAsync (string propertyId, string currencyCode, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a properties details
        /// </summary>
        /// <remarks>
        /// Get all information about a specific property by its ID.
        /// </remarks>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PropertiesPropertyIdGet200Response</returns>
        System.Threading.Tasks.Task<PropertiesPropertyIdGet200Response> PropertiesPropertyIdGetAsync (string propertyId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a properties details
        /// </summary>
        /// <remarks>
        /// Get all information about a specific property by its ID.
        /// </remarks>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PropertiesPropertyIdGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertiesPropertyIdGet200Response>> PropertiesPropertyIdGetWithHttpInfoAsync (string propertyId, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private lodgea-csharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new lodgea-csharp.Client.Configuration { BasePath = basePath };

            ExceptionFactory = lodgea-csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = lodgea-csharp.Client.Configuration.Default;

            ExceptionFactory = lodgea-csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(lodgea-csharp.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = lodgea-csharp.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = lodgea-csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public lodgea-csharp.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public lodgea-csharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Search for availability Get availability information based on search criteria.
        /// </summary>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="availabilitySearchPostRequest"> (optional)</param>
        /// <returns>AvailabilitySearchPost200Response</returns>
        public AvailabilitySearchPost200Response AvailabilitySearchPost (AvailabilitySearchPostRequest availabilitySearchPostRequest = default(AvailabilitySearchPostRequest))
        {
             ApiResponse<AvailabilitySearchPost200Response> localVarResponse = AvailabilitySearchPostWithHttpInfo(availabilitySearchPostRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search for availability Get availability information based on search criteria.
        /// </summary>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="availabilitySearchPostRequest"> (optional)</param>
        /// <returns>ApiResponse of AvailabilitySearchPost200Response</returns>
        public ApiResponse<AvailabilitySearchPost200Response> AvailabilitySearchPostWithHttpInfo (AvailabilitySearchPostRequest availabilitySearchPostRequest = default(AvailabilitySearchPostRequest))
        {

            var localVarPath = "/availability/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (availabilitySearchPostRequest != null && availabilitySearchPostRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(availabilitySearchPostRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = availabilitySearchPostRequest; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AvailabilitySearchPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AvailabilitySearchPost200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AvailabilitySearchPost200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AvailabilitySearchPost200Response)));
        }

        /// <summary>
        /// Search for availability Get availability information based on search criteria.
        /// </summary>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="availabilitySearchPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AvailabilitySearchPost200Response</returns>
        public async System.Threading.Tasks.Task<AvailabilitySearchPost200Response> AvailabilitySearchPostAsync (AvailabilitySearchPostRequest availabilitySearchPostRequest = default(AvailabilitySearchPostRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AvailabilitySearchPost200Response> localVarResponse = await AvailabilitySearchPostWithHttpInfoAsync(availabilitySearchPostRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search for availability Get availability information based on search criteria.
        /// </summary>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="availabilitySearchPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AvailabilitySearchPost200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AvailabilitySearchPost200Response>> AvailabilitySearchPostWithHttpInfoAsync (AvailabilitySearchPostRequest availabilitySearchPostRequest = default(AvailabilitySearchPostRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/availability/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (availabilitySearchPostRequest != null && availabilitySearchPostRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(availabilitySearchPostRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = availabilitySearchPostRequest; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AvailabilitySearchPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AvailabilitySearchPost200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AvailabilitySearchPost200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AvailabilitySearchPost200Response)));
        }

        /// <summary>
        /// Search for location Get a list of locations and their lowest available rate related to a given keyword.
        /// </summary>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationSearchPostRequest"> (optional)</param>
        /// <returns>LocationSearchPost200Response</returns>
        public LocationSearchPost200Response LocationSearchPost (LocationSearchPostRequest locationSearchPostRequest = default(LocationSearchPostRequest))
        {
             ApiResponse<LocationSearchPost200Response> localVarResponse = LocationSearchPostWithHttpInfo(locationSearchPostRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search for location Get a list of locations and their lowest available rate related to a given keyword.
        /// </summary>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationSearchPostRequest"> (optional)</param>
        /// <returns>ApiResponse of LocationSearchPost200Response</returns>
        public ApiResponse<LocationSearchPost200Response> LocationSearchPostWithHttpInfo (LocationSearchPostRequest locationSearchPostRequest = default(LocationSearchPostRequest))
        {

            var localVarPath = "/location/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationSearchPostRequest != null && locationSearchPostRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(locationSearchPostRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = locationSearchPostRequest; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LocationSearchPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LocationSearchPost200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LocationSearchPost200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LocationSearchPost200Response)));
        }

        /// <summary>
        /// Search for location Get a list of locations and their lowest available rate related to a given keyword.
        /// </summary>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationSearchPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of LocationSearchPost200Response</returns>
        public async System.Threading.Tasks.Task<LocationSearchPost200Response> LocationSearchPostAsync (LocationSearchPostRequest locationSearchPostRequest = default(LocationSearchPostRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<LocationSearchPost200Response> localVarResponse = await LocationSearchPostWithHttpInfoAsync(locationSearchPostRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search for location Get a list of locations and their lowest available rate related to a given keyword.
        /// </summary>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationSearchPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (LocationSearchPost200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LocationSearchPost200Response>> LocationSearchPostWithHttpInfoAsync (LocationSearchPostRequest locationSearchPostRequest = default(LocationSearchPostRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/location/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationSearchPostRequest != null && locationSearchPostRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(locationSearchPostRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = locationSearchPostRequest; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LocationSearchPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LocationSearchPost200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LocationSearchPost200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LocationSearchPost200Response)));
        }

        /// <summary>
        /// List (filtered) properties List properties, optionally filtered by a keyword.
        /// </summary>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <returns>PropertiesGet200Response</returns>
        public PropertiesGet200Response PropertiesGet (string keyword = default(string), string pageToken = default(string))
        {
             ApiResponse<PropertiesGet200Response> localVarResponse = PropertiesGetWithHttpInfo(keyword, pageToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List (filtered) properties List properties, optionally filtered by a keyword.
        /// </summary>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <returns>ApiResponse of PropertiesGet200Response</returns>
        public ApiResponse<PropertiesGet200Response> PropertiesGetWithHttpInfo (string keyword = default(string), string pageToken = default(string))
        {

            var localVarPath = "/properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyword", keyword)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PropertiesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertiesGet200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PropertiesGet200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertiesGet200Response)));
        }

        /// <summary>
        /// List (filtered) properties List properties, optionally filtered by a keyword.
        /// </summary>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PropertiesGet200Response</returns>
        public async System.Threading.Tasks.Task<PropertiesGet200Response> PropertiesGetAsync (string keyword = default(string), string pageToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PropertiesGet200Response> localVarResponse = await PropertiesGetWithHttpInfoAsync(keyword, pageToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List (filtered) properties List properties, optionally filtered by a keyword.
        /// </summary>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyword"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PropertiesGet200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PropertiesGet200Response>> PropertiesGetWithHttpInfoAsync (string keyword = default(string), string pageToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keyword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keyword", keyword)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PropertiesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertiesGet200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PropertiesGet200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertiesGet200Response)));
        }

        /// <summary>
        /// Get a properties availability Get detailed availability information for a specific property.
        /// </summary>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyId"></param>
        /// <param name="currencyCode"></param>
        /// <returns>PropertiesPropertyIdAvailabilityGet200Response</returns>
        public PropertiesPropertyIdAvailabilityGet200Response PropertiesPropertyIdAvailabilityGet (string propertyId, string currencyCode)
        {
             ApiResponse<PropertiesPropertyIdAvailabilityGet200Response> localVarResponse = PropertiesPropertyIdAvailabilityGetWithHttpInfo(propertyId, currencyCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a properties availability Get detailed availability information for a specific property.
        /// </summary>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyId"></param>
        /// <param name="currencyCode"></param>
        /// <returns>ApiResponse of PropertiesPropertyIdAvailabilityGet200Response</returns>
        public ApiResponse<PropertiesPropertyIdAvailabilityGet200Response> PropertiesPropertyIdAvailabilityGetWithHttpInfo (string propertyId, string currencyCode)
        {
            // verify the required parameter 'propertyId' is set
            if (propertyId == null)
                throw new ApiException(400, "Missing required parameter 'propertyId' when calling DefaultApi->PropertiesPropertyIdAvailabilityGet");
            // verify the required parameter 'currencyCode' is set
            if (currencyCode == null)
                throw new ApiException(400, "Missing required parameter 'currencyCode' when calling DefaultApi->PropertiesPropertyIdAvailabilityGet");

            var localVarPath = "/properties/{propertyId}/availability";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (propertyId != null) localVarPathParams.Add("propertyId", this.Configuration.ApiClient.ParameterToString(propertyId)); // path parameter
            if (currencyCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currencyCode", currencyCode)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PropertiesPropertyIdAvailabilityGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertiesPropertyIdAvailabilityGet200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PropertiesPropertyIdAvailabilityGet200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertiesPropertyIdAvailabilityGet200Response)));
        }

        /// <summary>
        /// Get a properties availability Get detailed availability information for a specific property.
        /// </summary>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyId"></param>
        /// <param name="currencyCode"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PropertiesPropertyIdAvailabilityGet200Response</returns>
        public async System.Threading.Tasks.Task<PropertiesPropertyIdAvailabilityGet200Response> PropertiesPropertyIdAvailabilityGetAsync (string propertyId, string currencyCode, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PropertiesPropertyIdAvailabilityGet200Response> localVarResponse = await PropertiesPropertyIdAvailabilityGetWithHttpInfoAsync(propertyId, currencyCode, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a properties availability Get detailed availability information for a specific property.
        /// </summary>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyId"></param>
        /// <param name="currencyCode"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PropertiesPropertyIdAvailabilityGet200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PropertiesPropertyIdAvailabilityGet200Response>> PropertiesPropertyIdAvailabilityGetWithHttpInfoAsync (string propertyId, string currencyCode, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'propertyId' is set
            if (propertyId == null)
                throw new ApiException(400, "Missing required parameter 'propertyId' when calling DefaultApi->PropertiesPropertyIdAvailabilityGet");
            // verify the required parameter 'currencyCode' is set
            if (currencyCode == null)
                throw new ApiException(400, "Missing required parameter 'currencyCode' when calling DefaultApi->PropertiesPropertyIdAvailabilityGet");

            var localVarPath = "/properties/{propertyId}/availability";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (propertyId != null) localVarPathParams.Add("propertyId", this.Configuration.ApiClient.ParameterToString(propertyId)); // path parameter
            if (currencyCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currencyCode", currencyCode)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PropertiesPropertyIdAvailabilityGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertiesPropertyIdAvailabilityGet200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PropertiesPropertyIdAvailabilityGet200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertiesPropertyIdAvailabilityGet200Response)));
        }

        /// <summary>
        /// Get a properties details Get all information about a specific property by its ID.
        /// </summary>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyId"></param>
        /// <returns>PropertiesPropertyIdGet200Response</returns>
        public PropertiesPropertyIdGet200Response PropertiesPropertyIdGet (string propertyId)
        {
             ApiResponse<PropertiesPropertyIdGet200Response> localVarResponse = PropertiesPropertyIdGetWithHttpInfo(propertyId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a properties details Get all information about a specific property by its ID.
        /// </summary>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyId"></param>
        /// <returns>ApiResponse of PropertiesPropertyIdGet200Response</returns>
        public ApiResponse<PropertiesPropertyIdGet200Response> PropertiesPropertyIdGetWithHttpInfo (string propertyId)
        {
            // verify the required parameter 'propertyId' is set
            if (propertyId == null)
                throw new ApiException(400, "Missing required parameter 'propertyId' when calling DefaultApi->PropertiesPropertyIdGet");

            var localVarPath = "/properties/{propertyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (propertyId != null) localVarPathParams.Add("propertyId", this.Configuration.ApiClient.ParameterToString(propertyId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PropertiesPropertyIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertiesPropertyIdGet200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PropertiesPropertyIdGet200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertiesPropertyIdGet200Response)));
        }

        /// <summary>
        /// Get a properties details Get all information about a specific property by its ID.
        /// </summary>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PropertiesPropertyIdGet200Response</returns>
        public async System.Threading.Tasks.Task<PropertiesPropertyIdGet200Response> PropertiesPropertyIdGetAsync (string propertyId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PropertiesPropertyIdGet200Response> localVarResponse = await PropertiesPropertyIdGetWithHttpInfoAsync(propertyId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a properties details Get all information about a specific property by its ID.
        /// </summary>
        /// <exception cref="lodgea-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PropertiesPropertyIdGet200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PropertiesPropertyIdGet200Response>> PropertiesPropertyIdGetWithHttpInfoAsync (string propertyId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'propertyId' is set
            if (propertyId == null)
                throw new ApiException(400, "Missing required parameter 'propertyId' when calling DefaultApi->PropertiesPropertyIdGet");

            var localVarPath = "/properties/{propertyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (propertyId != null) localVarPathParams.Add("propertyId", this.Configuration.ApiClient.ParameterToString(propertyId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PropertiesPropertyIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertiesPropertyIdGet200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PropertiesPropertyIdGet200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertiesPropertyIdGet200Response)));
        }

    }
}
